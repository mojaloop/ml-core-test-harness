{
  "name": "multi",
  "test_cases": [
    {
      "id": "pre-settlement-a-269f",
      "name": "Pre-settlement account activation per participant and currency",
      "meta": {
        "info": "Pre-settlement account activation per participant and currency"
      },
      "requests": [
        {
          "id": "Get-payerfsp-acc-id",
          "meta": {
            "info": "Get payerfsp account id"
          },
          "description": "Get payerfsp account id",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "acc-id-not-null",
                "description": "Account id not null",
                "exec": [
                  "expect(environment.participant1accountid).to.not.be.null;"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "\r",
                "var jsonData = response.body;\r",
                "console.log(jsonData);\r",
                "const {$inputs.SIMPAYER_NAME} = {}\r",
                "\r",
                "for (const i in jsonData) {\r",
                "  if (jsonData[i].ledgerAccountType === 'POSITION') {\r",
                "    {$inputs.SIMPAYER_NAME}[jsonData[i].currency] = jsonData[i].id\r",
                "    environment.accounts = {\r",
                "      ...environment.accounts,\r",
                "      {$inputs.SIMPAYER_NAME}\r",
                "    }\r",
                "  };\r",
                "}\r",
                "\r",
                "console.log(environment.accounts.{$inputs.SIMPAYER_NAME});"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Active-acc-curr-payerfsp",
          "meta": {
            "info": "Active account for currency for payerfsp"
          },
          "description": "Active account for currency for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts/{$requestVariables.currentId}",
          "method": "put",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}",
            "id": "{$requestVariables.currentId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "body": {
            "isActive": true
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.currentId = environment.accounts[environment.SIMPAYER_NAME][environment.currency]",
                "",
                "console.log(requestVariables.currentId)"
              ]
            }
          }
        },
        {
          "id": "Active-acc-currency2-payerfsp",
          "meta": {
            "info": "Active account for currency2 for payerfsp"
          },
          "description": "Active account for currency2 for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts/{$requestVariables.currentId}",
          "method": "put",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}",
            "id": "{$requestVariables.currentId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "body": {
            "isActive": true
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.currentId = environment.accounts[environment.SIMPAYER_NAME][environment.currency2]",
                "",
                "console.log(requestVariables.currentId)"
              ]
            }
          }
        },
        {
          "id": "Get-payeefsp-acc-id",
          "meta": {
            "info": "Get payeefsp account id"
          },
          "description": "Get payeefsp account id",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "acc-id-not-null",
                "description": "Account id not null",
                "exec": [
                  "expect(environment.participant1accountid).to.not.be.null;"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "\r",
                "var jsonData = response.body;\r",
                "console.log(jsonData);\r",
                "const {$inputs.SIMPAYEE_NAME} = {}\r",
                "\r",
                "for (const i in jsonData) {\r",
                "  if (jsonData[i].ledgerAccountType === 'POSITION') {\r",
                "    {$inputs.SIMPAYEE_NAME}[jsonData[i].currency] = jsonData[i].id\r",
                "    environment.accounts = {\r",
                "      ...environment.accounts,\r",
                "      {$inputs.SIMPAYEE_NAME}\r",
                "    }\r",
                "  };\r",
                "}\r",
                "\r",
                "console.log(environment.accounts.{$inputs.SIMPAYEE_NAME});"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Active-acc-curr-payeefsp",
          "meta": {
            "info": "Active account for currency for payeefsp"
          },
          "description": "Active account for currency for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts/{$requestVariables.currentId}",
          "method": "put",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}",
            "id": "{$requestVariables.currentId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "body": {
            "isActive": true
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.currentId = environment.accounts[environment.SIMPAYEE_NAME][environment.currency]",
                "",
                "console.log(requestVariables.currentId)"
              ]
            }
          }
        },
        {
          "id": "Active-acc-currency2-payeefsp",
          "meta": {
            "info": "Active account for currency2 for payeefsp"
          },
          "description": "Active account for currency2 for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/accounts/{$requestVariables.currentId}",
          "method": "put",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}",
            "id": "{$requestVariables.currentId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "body": {
            "isActive": true
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.currentId = environment.accounts[environment.SIMPAYEE_NAME][environment.currency2]",
                "",
                "console.log(requestVariables.currentId)"
              ]
            }
          }
        },
        {
          "id": "Get-testfsp1-acc-id",
          "meta": {
            "info": "Get testfsp1 account id"
          },
          "description": "Get testfsp1 account id",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "acc-id-not-null",
                "description": "Account id not null",
                "exec": [
                  "expect(environment.participant1accountid).to.not.be.null;"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "\r",
                "var jsonData = response.body;\r",
                "console.log(jsonData);\r",
                "const {$inputs.SIM1_NAME} = {}\r",
                "\r",
                "for (const i in jsonData) {\r",
                "  if (jsonData[i].ledgerAccountType === 'POSITION') {\r",
                "    {$inputs.SIM1_NAME}[jsonData[i].currency] = jsonData[i].id\r",
                "    environment.accounts = {\r",
                "      ...environment.accounts,\r",
                "      {$inputs.SIM1_NAME}\r",
                "    }\r",
                "  };\r",
                "}\r",
                "\r",
                "console.log(environment.accounts.{$inputs.SIM1_NAME});"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Active-acc-curr-testfsp1",
          "meta": {
            "info": "Active account for currency for testfsp1"
          },
          "description": "Active account for currency for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts/{$requestVariables.currentId}",
          "method": "put",
          "params": {
            "name": "{$inputs.SIM1_NAME}",
            "id": "{$requestVariables.currentId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "body": {
            "isActive": true
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.currentId = environment.accounts[environment.SIM1_NAME][environment.currency]",
                "",
                "console.log(requestVariables.currentId)"
              ]
            }
          }
        },
        {
          "id": "Active-acc-currency2-testfsp1",
          "meta": {
            "info": "Active account for currency2 for testfsp1"
          },
          "description": "Active account for currency2 for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts/{$requestVariables.currentId}",
          "method": "put",
          "params": {
            "name": "{$inputs.SIM1_NAME}",
            "id": "{$requestVariables.currentId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "body": {
            "isActive": true
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.currentId = environment.accounts[environment.SIM1_NAME][environment.currency2]",
                "",
                "console.log(requestVariables.currentId)"
              ]
            }
          }
        },
        {
          "id": "Get-testfsp2-acc-id",
          "meta": {
            "info": "Get testfsp2 account id"
          },
          "description": "Get testfsp2 account id",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "acc-id-not-null",
                "description": "Account id not null",
                "exec": [
                  "expect(environment.participant1accountid).to.not.be.null;"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "\r",
                "var jsonData = response.body;\r",
                "console.log(jsonData);\r",
                "const {$inputs.SIM2_NAME} = {}\r",
                "\r",
                "for (const i in jsonData) {\r",
                "  if (jsonData[i].ledgerAccountType === 'POSITION') {\r",
                "    {$inputs.SIM2_NAME}[jsonData[i].currency] = jsonData[i].id\r",
                "    environment.accounts = {\r",
                "      ...environment.accounts,\r",
                "      {$inputs.SIM2_NAME}\r",
                "    }\r",
                "  };\r",
                "}\r",
                "\r",
                "console.log(environment.accounts.{$inputs.SIM2_NAME});"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Active-acc-curr-testfsp2",
          "meta": {
            "info": "Active account for currency for testfsp2"
          },
          "description": "Active account for currency for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts/{$requestVariables.currentId}",
          "method": "put",
          "params": {
            "name": "{$inputs.SIM2_NAME}",
            "id": "{$requestVariables.currentId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "body": {
            "isActive": true
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.currentId = environment.accounts[environment.SIM2_NAME][environment.currency]",
                "",
                "console.log(requestVariables.currentId)"
              ]
            }
          }
        },
        {
          "id": "Active-acc-currency2-testfsp2",
          "meta": {
            "info": "Active account for currency2 for testfsp2"
          },
          "description": "Active account for currency2 for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts/{$requestVariables.currentId}",
          "method": "put",
          "params": {
            "name": "{$inputs.SIM2_NAME}",
            "id": "{$requestVariables.currentId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "body": {
            "isActive": true
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.currentId = environment.accounts[environment.SIM2_NAME][environment.currency2]",
                "",
                "console.log(requestVariables.currentId)"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2010
      }
    },
    {
      "id": "create-settle",
      "name": "Create Settlement on the current open window",
      "meta": {
        "info": "Create Settlement on the current open window"
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window",
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-existent-window",
          "meta": {
            "info": "Close existent window"
          },
          "description": "Close existent window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200-400",
                "description": "Status code is 200 or 400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              },
              {
                "id": "New-window-State-OPEN",
                "description": "New window State should be OPEN",
                "exec": [
                  "",
                  " if (response.status === 400) {",
                  "   ",
                  "expect(response.body.errorInformation.errorCode).to.eql('3100');",
                  "expect(response.body.errorInformation.errorDescription).to.eql('Generic validation error - Window ' + environment.openWindowID + ' is empty');",
                  "}else{",
                  "  ",
                  "  ",
                  "  expect(environment.openWindowstate).to.equal(\"OPEN\");",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "var rcode = Number(response.status);",
                "//console.log(rcode);",
                "",
                "//if (rcode == 200){",
                "environment.closedWindowID= Number(environment.openWindowID);",
                "environment.openWindowstate=jsonData.state;",
                "",
                "console.log(environment.openWindowstate);",
                "console.log(environment.closedWindowID);",
                "//}"
              ]
            }
          }
        },
        {
          "id": "Create-settle-Closed-Window-de",
          "meta": {
            "info": "Create Settlement for Closed Window in deferred settlement model for currency"
          },
          "description": "Create Settlement for Closed Window in deferred settlement model for currency",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": "settle-State-PENDING_SETTLEMEN",
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              },
              {
                "id": "Number-associated-windows-1",
                "description": "Number of associated windows should be 1",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows.length).to.equal(1)",
                  "}"
                ]
              },
              {
                "id": "Associated-settle-Window-ID-co",
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)",
                  "}"
                ]
              },
              {
                "id": "Associated-settle-Window-state",
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "{$requestVariables.settlementModel}",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$requestVariables.closedWindowID}"
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.settlementId = jsonData.id;",
                "environment.winstate = jsonData.state;",
                "",
                "if (response.body.errorInformation?.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            },
            "preRequest": {
              "exec": [
                "//environment.closedWindowID = 6;",
                "requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "",
                "/*requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "*/",
                "",
                "requestVariables.settlementModel = environment.settlementModels.deferred[environment.currency]",
                "",
                "// console.log(requestVariables.settlementModel)",
                "",
                "console.log(environment.settlementModels.deferred[environment.currency])"
              ]
            }
          }
        },
        {
          "id": "Prepare-settle",
          "meta": {
            "info": "Prepare Settlement"
          },
          "description": "Prepare Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.settlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.SIMPAYER_CURRENCY).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers recorded for payer\",",
                "                      \"state\": \"PS_TRANSFERS_RECORDED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Reserve-settle",
          "meta": {
            "info": "Reserve Settlement"
          },
          "description": "Reserve Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_RECORDED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.SIMPAYER_CURRENCY).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers reserved\",",
                "                      \"state\": \"PS_TRANSFERS_RESERVED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            }
          }
        },
        {
          "id": "Commit-settle",
          "meta": {
            "info": "Commit Settlement"
          },
          "description": "Commit Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_RESERVED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.SIMPAYER_CURRENCY).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers committed\",",
                "                      \"state\": \"PS_TRANSFERS_COMMITTED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            }
          }
        },
        {
          "id": "Settle-settle",
          "meta": {
            "info": "Settle Settlement"
          },
          "description": "Settle Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_COMMITTED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.SIMPAYER_CURRENCY).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers settled for payer\",",
                "                      \"state\": \"SETTLED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "",
                "  "
              ]
            }
          }
        },
        {
          "id": "Create-settle-Closed-Window-de-1",
          "meta": {
            "info": "Create Settlement for Closed Window in default deferred settlement model "
          },
          "description": "Create Settlement for Closed Window in default deferred settlement model ",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": "settle-State-PENDING_SETTLEMEN",
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              },
              {
                "id": "Number-associated-windows-1",
                "description": "Number of associated windows should be 1",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows.length).to.equal(1)",
                  "}"
                ]
              },
              {
                "id": "Associated-settle-Window-ID-co",
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)",
                  "}"
                ]
              },
              {
                "id": "Associated-settle-Window-state",
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "{$environment.settlementModels.deferred.default}",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$requestVariables.closedWindowID}"
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.settlementId = jsonData.id;",
                "environment.winstate = jsonData.state;",
                "",
                "if (response.body.errorInformation.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            },
            "preRequest": {
              "exec": [
                "//environment.closedWindowID = 6;",
                "requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "",
                "/*requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "*/",
                "",
                "requestVariables.settlementModel = environment.settlementModels.deferred[environment.currency]",
                "",
                "console.log(requestVariables.settlementModel)"
              ]
            }
          }
        },
        {
          "id": "Prepare-settle-Default-settle-",
          "meta": {
            "info": "Prepare Settlement Default Settlement Model"
          },
          "description": "Prepare Settlement Default Settlement Model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.settlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.SIMPAYER_CURRENCY).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers recorded for payer\",",
                "                      \"state\": \"PS_TRANSFERS_RECORDED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Reserve-settle-Default-settle-",
          "meta": {
            "info": "Reserve Settlement Default Settlement Model"
          },
          "description": "Reserve Settlement Default Settlement Model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_RECORDED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.SIMPAYER_CURRENCY).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers reserved\",",
                "                      \"state\": \"PS_TRANSFERS_RESERVED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            }
          }
        },
        {
          "id": "Commit-settle-Default-settle-M",
          "meta": {
            "info": "Commit Settlement Default Settlement Model"
          },
          "description": "Commit Settlement Default Settlement Model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_RESERVED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.SIMPAYER_CURRENCY).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers committed\",",
                "                      \"state\": \"PS_TRANSFERS_COMMITTED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            }
          }
        },
        {
          "id": "Settle-settle-Default-settle-M",
          "meta": {
            "info": "Settle Settlement Default Settlement Model"
          },
          "description": "Settle Settlement Default Settlement Model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_COMMITTED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.SIMPAYER_CURRENCY).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers settled for payer\",",
                "                      \"state\": \"SETTLED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "",
                "",
                "  "
              ]
            }
          }
        },
        {
          "id": "get-settlements-models",
          "meta": {
            "info": "get settlements models"
          },
          "description": "get settlements models",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/settlementModels",
          "path": "/settlementModels",
          "method": "get",
          "scriptingEngine": "javascript",
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "status-code-200",
                "description": "status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.settlementModels = { deferred: {}}",
                "for (const sm of jsonData) {",
                "  if (sm.settlementDelay === 'DEFERRED') {",
                "    if (sm.currency === null) {",
                "      environment.settlementModels.deferred.default = sm.name",
                "    } else {",
                "      environment.settlementModels.deferred[sm.currency] = sm.name",
                "    }",
                "  }",
                "}",
                "",
                "console.log(environment.settlementModels)"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2020
      }
    },
    {
      "id": "store-settle",
      "name": "Store settlement and position balances before",
      "meta": {
        "info": "Store settlement and position balances before"
      },
      "requests": [
        {
          "id": "get-balances-testfsp1",
          "meta": {
            "info": "get balances for testfsp1"
          },
          "description": "get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.balances = {}",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM1_NAME} = { beforeTransfer: {} }",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM1_NAME}.beforeTransfer).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM1_NAME}.beforeTransfer[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM1_NAME}.beforeTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM1_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances);"
              ]
            }
          }
        },
        {
          "id": "get-balances-testfsp2",
          "meta": {
            "info": "get balances for testfsp2"
          },
          "description": "get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM2_NAME} = { beforeTransfer: {} }",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM2_NAME}.beforeTransfer).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM2_NAME}.beforeTransfer[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM2_NAME}.beforeTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM2_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances);"
              ]
            }
          }
        },
        {
          "id": "get-balances-payerfsp",
          "meta": {
            "info": "get balances for payerfsp"
          },
          "description": "get balances for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYER_NAME} = { beforeTransfer: {} }",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYER_NAME}.beforeTransfer).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYER_NAME}.beforeTransfer[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYER_NAME}.beforeTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYER_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances);"
              ]
            }
          }
        },
        {
          "id": "get-balances-payeefsp",
          "meta": {
            "info": "get balances for payeefsp"
          },
          "description": "get balances for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYEE_NAME} = { beforeTransfer: {} }",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYEE_NAME}.beforeTransfer).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYEE_NAME}.beforeTransfer[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYEE_NAME}.beforeTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYEE_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances);"
              ]
            }
          }
        },
        {
          "id": "Get-Hub-balances",
          "meta": {
            "info": "Get Hub balances"
          },
          "description": "Get Hub balances",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.HUB_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.HUB_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const Hub = { beforeTransfer: {} }",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys(Hub.beforeTransfer).includes(jsonData[i].currency)) {",
                "    Hub.beforeTransfer[jsonData[i].currency] = {}",
                "  }",
                "  Hub.beforeTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    Hub",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances);"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2030
      }
    },
    {
      "id": "send-transfer-cu-a759",
      "name": "Send transfer $currency from SIM1 to SIM2",
      "meta": {
        "info": "Send transfer $currency from SIM1 to SIM2"
      },
      "requests": [
        {
          "id": "Send-quote",
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIM1_NAME}",
            "Authorization": "{$inputs.TESTFSP1_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.SIM2_NAME}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.testfsp1Identifier}",
                "fspId": "{$inputs.SIM1_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.testfsp2Identifier}",
                "fspId": "{$inputs.SIM2_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "60",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.testfsp1callbacks.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.testfsp1callbacks.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(environment.testfsp1callbacks.data).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(environment.testfsp1callbacks.data.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(environment.testfsp1callbacks.data.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "cb-content-type-quotes",
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(environment.testfsp1callbacks.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": "req-amountType-RECEIVE",
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": "req-transactionType-scenario-t",
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": "req-transactionType-initiator-",
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": "req-transactionType-initiatorT",
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.TESTFSP1_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'testfsp1callbacksq')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.testfsp1callbacks = await websocket.getMessage('testfsp1callbacksq', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "/*console.log(environment.testfsp1callbacks);",
                "",
                "environment.transactionid = '{$request.body.transactionId}'",
                "console.log(environment.transactionid);*/"
              ]
            }
          }
        },
        {
          "id": "Send-trans",
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIM1_NAME}",
            "Authorization": "{$inputs.TESTFSP1_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.Send-quote.request.body.transactionId}",
            "payerFsp": "{$inputs.SIM1_NAME}",
            "payeeFsp": "{$inputs.SIM2_NAME}",
            "amount": {
              "amount": "60",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$environment.testfsp1callbacks.data.expiration}",
            "ilpPacket": "{$environment.testfsp1callbacks.data.ilpPacket}",
            "condition": "{$environment.testfsp1callbacks.data.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.testfsp1callbackst.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.testfsp1callbackst.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(environment.testfsp1callbackst.data.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "cb-content-type-transfers",
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(environment.testfsp1callbackst.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')"
                ]
              },
              {
                "id": "req-transferId-quote-req-trans",
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.Send-quote.request.body.transactionId}')"
                ]
              },
              {
                "id": "req-transferAmount-amt-curr-qu",
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.Send-quote.request.body.amount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.Send-quote.request.body.amount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal(environment.testfsp1callbackst.headers['fspiop-destination'])",
                  "",
                  ""
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.TESTFSP1_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.transferId}', 'testfsp1callbackst')",
                "}",
                "",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.testfsp1callbackst = await websocket.getMessage('testfsp1callbackst', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.testfsp1callbackst);"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2044
      }
    },
    {
      "id": "send-transfer-cu-7e48",
      "name": "Send transfer $currency2 from SIM1 to PAYEEFSP",
      "meta": {
        "info": "Send transfer $currency2 from SIM1 to PAYEEFSP"
      },
      "requests": [
        {
          "id": "Send-quote",
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIM1_NAME}",
            "FSPIOP-Destination": "{$inputs.SIMPAYEE_NAME}",
            "Authorization": "{$inputs.TESTFSP1_BEARER_TOKEN}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.testfsp1Identifier}",
                "fspId": "{$inputs.SIM1_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payeefspIdentifier}",
                "fspId": "{$inputs.SIMPAYEE_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "55",
              "currency": "{$inputs.currency2}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.testfsp1callbacks.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.testfsp1callbacks.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(environment.testfsp1callbacks.data).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(environment.testfsp1callbacks.data.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(environment.testfsp1callbacks.data.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "cb-content-type-quotes",
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(environment.testfsp1callbacks.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": "req-amountType-RECEIVE",
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": "req-transactionType-scenario-t",
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": "req-transactionType-initiator-",
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": "req-transactionType-initiatorT",
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.TESTFSP1_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'testfsp1callbacksq')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.testfsp1callbacks = await websocket.getMessage('testfsp1callbacksq', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.testfsp1callbacks);",
                "/*",
                "environment.transactionid = '{$request.body.transactionId}'",
                "console.log(environment.transactionid);*/"
              ]
            }
          }
        },
        {
          "id": "Send-trans",
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIM1_NAME}",
            "Authorization": "{$inputs.TESTFSP1_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.Send-quote.request.body.transactionId}",
            "payerFsp": "{$inputs.SIM1_NAME}",
            "payeeFsp": "{$inputs.SIMPAYEE_NAME}",
            "amount": {
              "amount": "55",
              "currency": "{$inputs.currency2}"
            },
            "expiration": "{$environment.testfsp1callbacks.data.expiration}",
            "ilpPacket": "{$environment.testfsp1callbacks.data.ilpPacket}",
            "condition": "{$environment.testfsp1callbacks.data.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.testfsp1callbackst.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.testfsp1callbackst.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(environment.testfsp1callbackst.data.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "cb-content-type-transfers",
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(environment.testfsp1callbackst.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')"
                ]
              },
              {
                "id": "req-transferId-quote-req-trans",
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.Send-quote.request.body.transactionId}')"
                ]
              },
              {
                "id": "req-transferAmount-amt-curr-qu",
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.Send-quote.request.body.amount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.Send-quote.request.body.amount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal(environment.testfsp1callbackst.headers['fspiop-destination'])"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.TESTFSP1_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.transferId}', 'testfsp1callbackst')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.testfsp1callbackst = await websocket.getMessage('testfsp1callbackst', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.testfsp1callbackst);"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2044
      }
    },
    {
      "id": "send-transfer-cu-f65c",
      "name": "Send transfer $currency from PAYERFSP to SIM1",
      "meta": {
        "info": "Send transfer $currency from PAYERFSP to SIM1"
      },
      "requests": [
        {
          "id": "Send-quote",
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "FSPIOP-Destination": "{$inputs.SIM1_NAME}",
            "Authorization": "{$inputs.PAYER_BEARER_TOKEN}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payerIdentifier}",
                "fspId": "{$inputs.SIMPAYER_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.testfsp1MSISDN}",
                "fspId": "{$inputs.SIM1_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "35",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.payerfspcallbacksq.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.payerfspcallbacksq.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(environment.payerfspcallbacksq.data).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(environment.payerfspcallbacksq.data.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(environment.payerfspcallbacksq.data.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "cb-content-type-quotes",
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(environment.payerfspcallbacksq.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": "req-amountType-RECEIVE",
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": "req-transactionType-scenario-t",
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": "req-transactionType-initiator-",
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": "req-transactionType-initiatorT",
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'payerfspcallbacksq')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payerfspcallbacksq = await websocket.getMessage('payerfspcallbacksq', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.payerfspcallbacksq);",
                "",
                "/*environment.transactionid = '{$request.body.transactionId}'",
                "console.log(environment.transactionid);*/"
              ]
            }
          }
        },
        {
          "id": "Send-trans",
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "Authorization": "{$inputs.PAYER_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.Send-quote.request.body.transactionId}",
            "payerFsp": "{$inputs.SIMPAYER_NAME}",
            "payeeFsp": "{$inputs.SIM1_NAME}",
            "amount": {
              "amount": "35",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$environment.payerfspcallbacksq.data.expiration}",
            "ilpPacket": "{$environment.payerfspcallbacksq.data.ilpPacket}",
            "condition": "{$environment.payerfspcallbacksq.data.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.payerfspcallbackst.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.payerfspcallbackst.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(environment.payerfspcallbackst.data.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "cb-content-type-transfers",
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(environment.payerfspcallbackst.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')"
                ]
              },
              {
                "id": "req-transferId-quote-req-trans",
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.Send-quote.request.body.transactionId}')"
                ]
              },
              {
                "id": "req-transferAmount-amt-curr-qu",
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.Send-quote.request.body.amount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.Send-quote.request.body.amount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal(environment.payerfspcallbackst.headers['fspiop-destination'])"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.transferId}', 'payerfspcallbackst')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payerfspcallbackst = await websocket.getMessage('payerfspcallbackst', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.payerfspcallbackst);"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2044
      }
    },
    {
      "id": "send-transfer-cu-16ed",
      "name": "Send transfer $currency2 from SIM2 to PAYERFSP",
      "meta": {
        "info": "Send transfer $currency2 from SIM2 to PAYERFSP"
      },
      "requests": [
        {
          "id": "Send-quote",
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIM2_NAME}",
            "FSPIOP-Destination": "{$inputs.SIMPAYER_NAME}",
            "Authorization": "{$inputs.TESTFSP2_BEARER_TOKEN}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.testfsp2Identifier}",
                "fspId": "{$inputs.SIM2_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payerIdentifier}",
                "fspId": "{$inputs.SIMPAYER_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "20",
              "currency": "{$inputs.currency2}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.testfsp2callbacks.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.testfsp2callbacks.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(environment.testfsp2callbacks.data).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(environment.testfsp2callbacks.data.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(environment.testfsp2callbacks.data.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "cb-content-type-quotes",
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(environment.testfsp2callbacks.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": "req-amountType-RECEIVE",
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": "req-transactionType-scenario-t",
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": "req-transactionType-initiator-",
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": "req-transactionType-initiatorT",
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "//console.log(environment.TESTFSP2_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}');",
                "",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  // NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API on the postRequest instead until it can be resolved.",
                "  await websocket.connect(environment.TESTFSP2_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'testfsp2callbacksq')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  // NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API on the postRequest instead until it can be resolved.",
                "  environment.testfsp2callbacks = await websocket.getMessage('testfsp2callbacksq', environment.WS_ASSERTION_TIMEOUT)",
                "  // const customSleep = Number.parseFloat(environment.SLEEP_MAX_WAIT_IN_MS) || 2000",
                "  // await custom.sleep(customSleep)",
                "  // environment.testfsp2callbacks = (await axios.get(environment.TESTFSP2_SDK_TESTAPI_URL + '/callbacks/{$request.body.quoteId}')).data;",
                "  console.log(environment.testfsp2callbacks);",
                "}",
                ""
              ]
            }
          }
        },
        {
          "id": "Send-trans",
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIM2_NAME}",
            "Authorization": "{$inputs.TESTFSP2_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.Send-quote.request.body.transactionId}",
            "payerFsp": "{$inputs.SIM2_NAME}",
            "payeeFsp": "{$inputs.SIMPAYER_NAME}",
            "amount": {
              "amount": "20",
              "currency": "{$inputs.currency2}"
            },
            "expiration": "{$environment.testfsp2callbacks.data.expiration}",
            "ilpPacket": "{$environment.testfsp2callbacks.data.ilpPacket}",
            "condition": "{$environment.testfsp2callbacks.data.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.testfsp2callbackst.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.testfsp2callbackst.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(environment.testfsp2callbackst.data.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "cb-content-type-transfers",
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(environment.testfsp2callbackst.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')"
                ]
              },
              {
                "id": "req-transferId-quote-req-trans",
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.Send-quote.request.body.transactionId}')"
                ]
              },
              {
                "id": "req-transferAmount-amt-curr-qu",
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.Send-quote.request.body.amount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.Send-quote.request.body.amount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal(environment.testfsp2callbackst.headers['fspiop-destination'])"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  // NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API on the postRequest instead until it can be resolved.",
                "  await websocket.connect(environment.TESTFSP2_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.transferId}', 'testfsp2callbackst')",
                "// }"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  // NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API on the postRequest instead until it can be resolved.",
                "  environment.testfsp2callbackst = await websocket.getMessage('testfsp2callbackst', environment.WS_ASSERTION_TIMEOUT)",
                "  // const customSleep = Number.parseFloat(environment.SLEEP_MAX_WAIT_IN_MS) || 1500",
                "  // await custom.sleep(customSleep)",
                "  // environment.testfsp2callbackst = (await axios.get(environment.TESTFSP2_SDK_TESTAPI_URL + '/callbacks/{$request.body.transferId}')).data",
                "  console.log(environment.testfsp2callbackst)",
                "}"
              ]
            }
          },
          "disabled": false
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2044
      }
    },
    {
      "id": "send-transfer-cu-a537",
      "name": "Send transfer $currency from PAYEEFSP to SIM2",
      "meta": {
        "info": "Send transfer $currency from PAYEEFSP to SIM2"
      },
      "requests": [
        {
          "id": "Send-quote",
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYEE_NAME}",
            "FSPIOP-Destination": "{$inputs.SIM2_NAME}",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payeeIdentifier}",
                "fspId": "{$inputs.SIMPAYEE_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payeefspIdentifier}",
                "fspId": "{$inputs.SIM2_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "35",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.payeefspcallbacks.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.payeefspcallbacks.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(environment.payeefspcallbacks.data).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(environment.payeefspcallbacks.data.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(environment.payeefspcallbacks.data.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "cb-content-type-quotes",
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(environment.payeefspcallbacks.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": "req-amountType-RECEIVE",
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": "req-transactionType-scenario-t",
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": "req-transactionType-initiator-",
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": "req-transactionType-initiatorT",
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'payeefspcallbacksq')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeefspcallbacks = await websocket.getMessage('payeefspcallbacksq', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.payeefspcallbacks);",
                "/*",
                "environment.transactionid = '{$request.body.transactionId}'",
                "console.log(environment.transactionid);*/"
              ]
            }
          }
        },
        {
          "id": "Send-trans",
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYEE_NAME}",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.Send-quote.request.body.transactionId}",
            "payerFsp": "{$inputs.SIMPAYEE_NAME}",
            "payeeFsp": "{$inputs.SIM2_NAME}",
            "amount": {
              "amount": "35",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$environment.payeefspcallbacks.data.expiration}",
            "ilpPacket": "{$environment.payeefspcallbacks.data.ilpPacket}",
            "condition": "{$environment.payeefspcallbacks.data.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.payeefspcallbackst.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.payeefspcallbackst.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(environment.payeefspcallbackst.data.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "cb-content-type-transfers",
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(environment.payeefspcallbackst.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')"
                ]
              },
              {
                "id": "req-transferId-quote-req-trans",
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.Send-quote.request.body.transactionId}')"
                ]
              },
              {
                "id": "req-transferAmount-amt-curr-qu",
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.Send-quote.request.body.amount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.Send-quote.request.body.amount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal(environment.payeefspcallbackst.headers['fspiop-destination'])"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.transferId}', 'payeefspcallbackst')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeefspcallbackst = await websocket.getMessage('payeefspcallbackst', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.payeefspcallbackst);"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2044
      }
    },
    {
      "id": "send-transfer-cu-32ea",
      "name": "Send transfer $currency2 from PAYEEFSP to PAYERFSP",
      "meta": {
        "info": "Send transfer $currency2 from PAYEEFSP to PAYERFSP"
      },
      "requests": [
        {
          "id": "Send-quote",
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYEE_NAME}",
            "FSPIOP-Destination": "{$inputs.SIMPAYER_NAME}",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payeeIdentifier}",
                "fspId": "{$inputs.SIMPAYEE_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payerIdentifier}",
                "fspId": "{$inputs.SIMPAYER_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "25",
              "currency": "{$inputs.currency2}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.payeefspcallbacks.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.payeefspcallbacks.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(environment.payeefspcallbacks.data).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(environment.payeefspcallbacks.data.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(environment.payeefspcallbacks.data.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "cb-content-type-quotes",
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(environment.payeefspcallbacks.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": "req-amountType-RECEIVE",
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": "req-transactionType-scenario-t",
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": "req-transactionType-initiator-",
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": "req-transactionType-initiatorT",
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'payeefspcallbacksq')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeefspcallbacks = await websocket.getMessage('payeefspcallbacksq', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.payeefspcallbacks);",
                "",
                "/*environment.transactionid = '{$request.body.transactionId}'",
                "console.log(environment.transactionid);*/"
              ]
            }
          }
        },
        {
          "id": "Send-trans",
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYEE_NAME}",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.Send-quote.request.body.transactionId}",
            "payerFsp": "{$inputs.SIMPAYEE_NAME}",
            "payeeFsp": "{$inputs.SIMPAYER_NAME}",
            "amount": {
              "amount": "25",
              "currency": "{$inputs.currency2}"
            },
            "expiration": "{$environment.payeefspcallbacks.data.expiration}",
            "ilpPacket": "{$environment.payeefspcallbacks.data.ilpPacket}",
            "condition": "{$environment.payeefspcallbacks.data.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(environment.payeefspcallbackst.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(environment.payeefspcallbackst.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(environment.payeefspcallbackst.data.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "cb-content-type-transfers",
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(environment.payeefspcallbackst.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')"
                ]
              },
              {
                "id": "req-transferId-quote-req-trans",
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.Send-quote.request.body.transactionId}')"
                ]
              },
              {
                "id": "req-transferAmount-amt-curr-qu",
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.Send-quote.request.body.amount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.Send-quote.request.body.amount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal(environment.payeefspcallbackst.headers['fspiop-destination'])"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.transferId}', 'payeefspcallbackst')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeefspcallbackst = await websocket.getMessage('payeefspcallbackst', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "console.log(environment.payeefspcallbackst);"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2044
      }
    },
    {
      "id": "create-settle",
      "name": "Create Settlement on the current open window",
      "meta": {
        "info": "Create Settlement on the current open window"
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window",
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-existent-window",
          "meta": {
            "info": "Close existent window"
          },
          "description": "Close existent window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200-400",
                "description": "Status code is 200 or 400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              },
              {
                "id": "New-window-State-OPEN",
                "description": "New window State should be OPEN",
                "exec": [
                  "",
                  " if (response.status === 400) {",
                  "   ",
                  "expect(response.body.errorInformation.errorCode).to.eql('3100');",
                  "expect(response.body.errorInformation.errorDescription).to.eql('Generic validation error - Window ' + environment.openWindowID + ' is empty');",
                  "}else{",
                  "  ",
                  "  ",
                  "  expect(environment.openWindowstate).to.equal(\"OPEN\");",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "var rcode = Number(response.status);",
                "//console.log(rcode);",
                "",
                "//if (rcode == 200){",
                "environment.closedWindowID= Number(environment.openWindowID);",
                "environment.openWindowstate=jsonData.state;",
                "",
                "console.log(environment.openWindowstate);",
                "console.log(environment.closedWindowID);",
                "//}"
              ]
            }
          }
        },
        {
          "id": "Create-settle-Closed-Window-se",
          "meta": {
            "info": "Create Settlement for Closed Window with Settlement Model for Currency"
          },
          "description": "Create Settlement for Closed Window with Settlement Model for Currency",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "settle-State-PENDING_SETTLEMEN",
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              },
              {
                "id": "Number-associated-windows-1",
                "description": "Number of associated windows should be 1",
                "exec": [
                  "expect(response.body.settlementWindows.length).to.equal(1)"
                ]
              },
              {
                "id": "Associated-settle-Window-ID-co",
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)"
                ]
              },
              {
                "id": "Associated-settle-Window-state",
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "{$requestVariables.settlementModel}",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.closedWindowID}"
              }
            ]
          },
          "delay": "3000",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.deferredSettlementId = jsonData.id;",
                "environment.winstate = jsonData.state;",
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                "//environment.closedWindowID = 6;",
                "requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "",
                "/*requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "*/",
                "",
                "requestVariables.settlementModel = environment.settlementModels.deferred[environment.currency]",
                "",
                "console.log(requestVariables.settlementModel)"
              ]
            }
          }
        },
        {
          "id": "Create-settle-Closed-Window-De",
          "meta": {
            "info": "Create Settlement for Closed Window for Default Settlement Model"
          },
          "description": "Create Settlement for Closed Window for Default Settlement Model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "settle-State-PENDING_SETTLEMEN",
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              },
              {
                "id": "Number-associated-windows-1",
                "description": "Number of associated windows should be 1",
                "exec": [
                  "expect(response.body.settlementWindows.length).to.equal(1)"
                ]
              },
              {
                "id": "Associated-settle-Window-ID-co",
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)"
                ]
              },
              {
                "id": "Associated-settle-Window-state",
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "{$requestVariables.settlementModel}",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.closedWindowID}"
              }
            ]
          },
          "delay": "3000",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.defaultSettlementId = jsonData.id;",
                "environment.winstate = jsonData.state;",
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                "requestVariables.settlementModel = environment.settlementModels.deferred.default",
                "",
                "console.log(requestVariables.settlementModel)"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2100
      }
    },
    {
      "id": "store-settle-transfers",
      "name": "Store Settlement&Position Account Balances After Transfers",
      "meta": {
        "info": "Store Settlement&Position Account Balances After Transfers"
      },
      "requests": [
        {
          "id": "Get-balances-testfsp1",
          "meta": {
            "info": "Get balances for testfsp1"
          },
          "description": "Get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM1_NAME} = {",
                "  ...environment.balances[environment.SIM1_NAME],",
                "  ...{afterTransfer: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM1_NAME}.afterTransfer).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM1_NAME}.afterTransfer[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM1_NAME}.afterTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM1_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            },
            "preRequest": {
              "exec": [
                "environment.balances.afterTransfer = {}"
              ]
            }
          }
        },
        {
          "id": "Get-balances-testfsp2",
          "meta": {
            "info": "Get balances for testfsp2"
          },
          "description": "Get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM2_NAME} = {",
                "  ...environment.balances[environment.SIM2_NAME],",
                "  ...{afterTransfer: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM2_NAME}.afterTransfer).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM2_NAME}.afterTransfer[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM2_NAME}.afterTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM2_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-ttkdfsp",
          "meta": {
            "info": "Get balances for ttkdfsp"
          },
          "description": "Get balances for ttkdfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYER_NAME} = {",
                "  ...environment.balances[environment.SIMPAYER_NAME],",
                "  ...{afterTransfer: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYER_NAME}.afterTransfer).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYER_NAME}.afterTransfer[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYER_NAME}.afterTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYER_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payeefsp",
          "meta": {
            "info": "Get balances for payeefsp"
          },
          "description": "Get balances for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYEE_NAME} = {",
                "  ...environment.balances[environment.SIMPAYEE_NAME],",
                "  ...{afterTransfer: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYEE_NAME}.afterTransfer).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYEE_NAME}.afterTransfer[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYEE_NAME}.afterTransfer[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYEE_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2110
      }
    },
    {
      "id": "prepare-settlements",
      "name": "Prepare-settlements",
      "meta": {
        "info": "Prepare-settlements"
      },
      "requests": [
        {
          "id": "Prepare-settle-deferred-settle",
          "meta": {
            "info": "Prepare Settlement with deferred settlement model for currency"
          },
          "description": "Prepare Settlement with deferred settlement model for currency",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.deferredSettlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.settlementWindows[0].state;",
                "",
                "console.log(environment.winstate);",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.deferredSettlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers recorded for payer\",",
                "                      \"state\": \"PS_TRANSFERS_RECORDED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after",
          "meta": {
            "info": "check state for participants after prepare deferred settlement model"
          },
          "description": "check state for participants after prepare deferred settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-PS_TRANSFERS_RECO",
                "description": "Check status PS_TRANSFERS_RECORDED",
                "exec": [
                  "expect(response.body.state).to.eql(\"PS_TRANSFERS_RECORDED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");"
                ]
              },
              {
                "id": "acc-state-PS_TRANSFERS_RECORDE",
                "description": "Account state is PS_TRANSFERS_RECORDED for all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"PS_TRANSFERS_RECORDED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        },
        {
          "id": "Prepare-settle-default-settle-",
          "meta": {
            "info": "Prepare Settlement with default settlement model"
          },
          "description": "Prepare Settlement with default settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.defaultSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.defaultSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.defaultSettlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.settlementWindows[0].state;",
                "",
                "console.log(environment.winstate);",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency2).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.defaultSettlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers recorded for payer\",",
                "                      \"state\": \"PS_TRANSFERS_RECORDED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after-1",
          "meta": {
            "info": "check state for participants after prepare default settlement"
          },
          "description": "check state for participants after prepare default settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-PS_TRANSFERS_RECO",
                "description": "Check status PS_TRANSFERS_RECORDED",
                "exec": [
                  "expect(response.body.state).to.eql(\"PS_TRANSFERS_RECORDED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");"
                ]
              },
              {
                "id": "acc-state-PS_TRANSFERS_RECORDE",
                "description": "Account state is PS_TRANSFERS_RECORDED for all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency2).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"PS_TRANSFERS_RECORDED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2120
      }
    },
    {
      "id": "store-settlement",
      "name": "Store Settlement&Position Account Balances After Prepare",
      "meta": {
        "info": "Store Settlement&Position Account Balances After Prepare"
      },
      "requests": [
        {
          "id": "Get-balances-testfsp1",
          "meta": {
            "info": "Get balances for testfsp1"
          },
          "description": "Get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "testfsp1-acc-bal-before-after-",
                "description": "testfsp1 account balance before and  after prepare should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM1_NAME].afterPrepare).to.deep.equal(environment.balances[environment.SIM1_NAME].afterTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM1_NAME} = {",
                "  ...environment.balances[environment.SIM1_NAME],",
                "  ...{afterPrepare: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM1_NAME}.afterPrepare).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM1_NAME}.afterPrepare[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM1_NAME}.afterPrepare[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM1_NAME}",
                "  }",
                "}",
                "",
                "console.log(environment.balances)",
                "console.log('afterPreapre: ',JSON.stringify(environment.balances[environment.SIM1_NAME].afterPrepare, null, 2)) ",
                "console.log('afterTransfer: ',JSON.stringify(environment.balances[environment.SIM1_NAME].afterTransfer, null, 2))",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                "environment.balances.afterPrepare = {}"
              ]
            }
          }
        },
        {
          "id": "Get-balances-testfsp2",
          "meta": {
            "info": "Get balances for testfsp2"
          },
          "description": "Get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "testfsp2-acc-bal-before-after-",
                "description": "testfsp2 account balance before and after prepare should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM2_NAME].afterPrepare).to.deep.equal(environment.balances[environment.SIM2_NAME].afterTransfer)",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM2_NAME} = {",
                "  ...environment.balances[environment.SIM2_NAME],",
                "  ...{afterPrepare: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM2_NAME}.afterPrepare).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM2_NAME}.afterPrepare[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM2_NAME}.afterPrepare[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM2_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)",
                "console.log('afterPreapre: ',JSON.stringify(environment.balances[environment.SIM2_NAME].afterPrepare, null, 2)) ",
                "console.log('afterTransfer: ',JSON.stringify(environment.balances[environment.SIM2_NAME].afterTransfer, null, 2))"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payerfsp",
          "meta": {
            "info": "Get balances for payerfsp"
          },
          "description": "Get balances for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "payerfsp-acc-bal-before-after-",
                "description": "payerfsp account balance before and after prepare should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYER_NAME].afterPrepare).to.deep.equal(environment.balances[environment.SIMPAYER_NAME].afterTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYER_NAME} = {",
                "  ...environment.balances[environment.SIMPAYER_NAME],",
                "  ...{afterPrepare: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYER_NAME}.afterPrepare).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYER_NAME}.afterPrepare[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYER_NAME}.afterPrepare[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYER_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payeefsp",
          "meta": {
            "info": "Get balances for payeefsp"
          },
          "description": "Get balances for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "payeefsp-acc-bal-before-after-",
                "description": "payeefsp account balance before and after prepare should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYEE_NAME].afterPrepare).to.deep.equal(environment.balances[environment.SIMPAYEE_NAME].afterTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYEE_NAME} = {",
                "  ...environment.balances[environment.SIMPAYEE_NAME],",
                "  ...{afterPrepare: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYEE_NAME}.afterPrepare).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYEE_NAME}.afterPrepare[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYEE_NAME}.afterPrepare[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYEE_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2130
      }
    },
    {
      "id": "reserve-settlement",
      "name": "reserve-settlement",
      "meta": {
        "info": "reserve-settlement"
      },
      "requests": [
        {
          "id": "reserve-settle-curr-Deferred-s",
          "meta": {
            "info": "reserve Settlement with Currency Deferred Settlement Model"
          },
          "description": "reserve Settlement with Currency Deferred Settlement Model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.deferredSettlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.settlementWindows[0].state;",
                "",
                "console.log(environment.winstate);",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.deferredSettlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers reserved\",",
                "                      \"state\": \"PS_TRANSFERS_RESERVED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after",
          "meta": {
            "info": "check state for participants after reserve with deferred settlement model"
          },
          "description": "check state for participants after reserve with deferred settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-PS_TRANSFERS_RESE",
                "description": "Check status PS_TRANSFERS_RESERVED",
                "exec": [
                  "expect(response.body.state).to.eql(\"PS_TRANSFERS_RESERVED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");"
                ]
              },
              {
                "id": "acc-state-PS_TRANSFERS_RESERVE",
                "description": "Account state is PS_TRANSFERS_RESERVEDfor all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"PS_TRANSFERS_RESERVED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        },
        {
          "id": "reserve-settle-default-settle-",
          "meta": {
            "info": "reserve Settlement with default settlement model"
          },
          "description": "reserve Settlement with default settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.defaultSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.defaultSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.defaultSettlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.settlementWindows[0].state;",
                "",
                "console.log(environment.winstate);",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency2).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.defaultSettlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers reserved\",",
                "                      \"state\": \"PS_TRANSFERS_RESERVED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after-1",
          "meta": {
            "info": "check state for participants after reserve with default settlement model"
          },
          "description": "check state for participants after reserve with default settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.defaultSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.defaultSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-PS_TRANSFERS_RESE",
                "description": "Check status PS_TRANSFERS_RESERVED",
                "exec": [
                  "expect(response.body.state).to.eql(\"PS_TRANSFERS_RESERVED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");"
                ]
              },
              {
                "id": "acc-state-PS_TRANSFERS_RESERVE",
                "description": "Account state is PS_TRANSFERS_RESERVEDfor all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency2).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"PS_TRANSFERS_RESERVED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2140
      }
    },
    {
      "id": "store-settlement",
      "name": "Store Settlement&Position Account Balances After Reserve",
      "meta": {
        "info": "Store Settlement&Position Account Balances After Reserve"
      },
      "requests": [
        {
          "id": "Get-balances-testfsp1",
          "meta": {
            "info": "Get balances for testfsp1"
          },
          "description": "Get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "testfsp1-acc-bal-before-after-",
                "description": "testfsp1 account balance before and  after reserve should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM1_NAME].afterReserve).to.deep.equal(environment.balances[environment.SIM1_NAME].afterTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM1_NAME} = {",
                "  ...environment.balances[environment.SIM1_NAME],",
                "  ...{afterReserve: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM1_NAME}.afterReserve).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM1_NAME}.afterReserve[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM1_NAME}.afterReserve[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM1_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            },
            "preRequest": {
              "exec": [
                "environment.balances.afterReserve = {}"
              ]
            }
          }
        },
        {
          "id": "Get-balances-testfsp2",
          "meta": {
            "info": "Get balances for testfsp2"
          },
          "description": "Get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "testfsp2-acc-curr-bal-before-a",
                "description": "testfsp2 account for currency balance before and after reserve should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM2_NAME].afterReserve[environment.currency]).to.deep.equal(environment.balances[environment.SIM2_NAME].beforeTransfer[environment.currency])",
                  ""
                ]
              },
              {
                "id": "testfsp2-acc-currency2-bal-bef",
                "description": "testfsp2 account for currency2 balance before and after reserve should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM2_NAME].afterReserve[environment.currency2]).to.deep.equal(environment.balances[environment.SIM2_NAME].afterTransfer[environment.currency2])"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM2_NAME} = {",
                "  ...environment.balances[environment.SIM2_NAME],",
                "  ...{afterReserve: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM2_NAME}.afterReserve).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM2_NAME}.afterReserve[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM2_NAME}.afterReserve[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM2_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payerfsp",
          "meta": {
            "info": "Get balances for payerfsp"
          },
          "description": "Get balances for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "payerfsp-acc-curr-bal-before-a",
                "description": "payerfsp account for currency balance before and after reserve should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYER_NAME].afterReserve[environment.currency]).to.deep.equal(environment.balances[environment.SIMPAYER_NAME].afterTransfer[environment.currency])",
                  ""
                ]
              },
              {
                "id": "payerfsp-acc-currency2-bal-bef",
                "description": "payerfsp account for currency2 balance before and after reserve should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYER_NAME].afterReserve[environment.currency2]).to.deep.equal(environment.balances[environment.SIMPAYER_NAME].beforeTransfer[environment.currency2])"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYER_NAME} = {",
                "  ...environment.balances[environment.SIMPAYER_NAME],",
                "  ...{afterReserve: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYER_NAME}.afterReserve).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYER_NAME}.afterReserve[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYER_NAME}.afterReserve[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYER_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payeefsp",
          "meta": {
            "info": "Get balances for payeefsp"
          },
          "description": "Get balances for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "payeefsp-acc-curr-bal-before-a",
                "description": "payeefsp account for currency balance before and after Reserve should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYEE_NAME].afterReserve[environment.currency]).to.deep.equal(environment.balances[environment.SIMPAYEE_NAME].afterTransfer[environment.currency])",
                  ""
                ]
              },
              {
                "id": "payeefsp-acc-curr-2-bal-before",
                "description": "payeefsp account for currency 2 balance before and after Reserve should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYEE_NAME].afterReserve[environment.currency2]).to.deep.equal(environment.balances[environment.SIMPAYEE_NAME].beforeTransfer[environment.currency2])"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYEE_NAME} = {",
                "  ...environment.balances[environment.SIMPAYEE_NAME],",
                "  ...{afterReserve: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYEE_NAME}.afterReserve).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYEE_NAME}.afterReserve[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYEE_NAME}.afterReserve[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYEE_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2150
      }
    },
    {
      "id": "commit-settlement",
      "name": "commit-settlement",
      "meta": {
        "info": "commit-settlement"
      },
      "requests": [
        {
          "id": "commit-settle-deferred-settle-",
          "meta": {
            "info": "commit Settlement with deferred settlement model"
          },
          "description": "commit Settlement with deferred settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.deferredSettlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.settlementWindows[0].state;",
                "",
                "console.log(environment.winstate);",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.deferredSettlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers committed\",",
                "                      \"state\": \"PS_TRANSFERS_COMMITTED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after",
          "meta": {
            "info": "check state for participants after commit deferred settlement model"
          },
          "description": "check state for participants after commit deferred settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-PS_TRANSFERS_COMM",
                "description": "Check status PS_TRANSFERS_COMMITTED",
                "exec": [
                  "expect(response.body.state).to.eql(\"PS_TRANSFERS_COMMITTED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");"
                ]
              },
              {
                "id": "acc-state-PS_TRANSFERS_COMMITT",
                "description": "Account state is PS_TRANSFERS_COMMITTED for all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"PS_TRANSFERS_COMMITTED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        },
        {
          "id": "commit-settle-default-settle-m",
          "meta": {
            "info": "commit Settlement default settlement model"
          },
          "description": "commit Settlement default settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.defaultSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.defaultSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.defaultSettlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.settlementWindows[0].state;",
                "",
                "console.log(environment.winstate);",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency2).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.defaultSettlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers committed\",",
                "                      \"state\": \"PS_TRANSFERS_COMMITTED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after-1",
          "meta": {
            "info": "check state for participants after commit default settlement model"
          },
          "description": "check state for participants after commit default settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.defaultSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.defaultSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-PS_TRANSFERS_COMM",
                "description": "Check status PS_TRANSFERS_COMMITTED",
                "exec": [
                  "expect(response.body.state).to.eql(\"PS_TRANSFERS_COMMITTED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");"
                ]
              },
              {
                "id": "acc-state-PS_TRANSFERS_COMMITT",
                "description": "Account state is PS_TRANSFERS_COMMITTED for all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency2).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"PS_TRANSFERS_COMMITTED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2160
      }
    },
    {
      "id": "store-settlement",
      "name": "Store Settlement&Position Account Balances After commit",
      "meta": {
        "info": "Store Settlement&Position Account Balances After commit"
      },
      "requests": [
        {
          "id": "Get-balances-testfsp1",
          "meta": {
            "info": "Get balances for testfsp1"
          },
          "description": "Get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "testfsp1-acc-bal-before-after-",
                "description": "testfsp1 account balance before and  after Commit should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM1_NAME].afterCommit).to.deep.equal(environment.balances[environment.SIM1_NAME].beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM1_NAME} = {",
                "  ...environment.balances[environment.SIM1_NAME],",
                "  ...{afterCommit: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM1_NAME}.afterCommit).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM1_NAME}.afterCommit[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM1_NAME}.afterCommit[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM1_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            },
            "preRequest": {
              "exec": [
                "environment.balances.afterCommit = {}"
              ]
            }
          }
        },
        {
          "id": "Get-balances-testfsp2",
          "meta": {
            "info": "Get balances for testfsp2"
          },
          "description": "Get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "testfsp2-acc-bal-before-after-",
                "description": "testfsp2 account balance before and after Commit should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM2_NAME].afterCommit).to.deep.equal(environment.balances[environment.SIM2_NAME].beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM2_NAME} = {",
                "  ...environment.balances[environment.SIM2_NAME],",
                "  ...{afterCommit: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM2_NAME}.afterCommit).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM2_NAME}.afterCommit[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM2_NAME}.afterCommit[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM2_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payerfsp",
          "meta": {
            "info": "Get balances for payerfsp"
          },
          "description": "Get balances for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "payerfsp-acc-bal-before-after-",
                "description": "payerfsp account balance before and after Commit should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYER_NAME].afterCommit).to.deep.equal(environment.balances[environment.SIMPAYER_NAME].beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYER_NAME} = {",
                "  ...environment.balances[environment.SIMPAYER_NAME],",
                "  ...{afterCommit: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYER_NAME}.afterCommit).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYER_NAME}.afterCommit[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYER_NAME}.afterCommit[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYER_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payeefsp",
          "meta": {
            "info": "Get balances for payeefsp"
          },
          "description": "Get balances for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "payeefsp-acc-bal-before-after-",
                "description": "payeefsp account balance before and after Commit should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYEE_NAME].afterCommit).to.deep.equal(environment.balances[environment.SIMPAYEE_NAME].beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYEE_NAME} = {",
                "  ...environment.balances[environment.SIMPAYEE_NAME],",
                "  ...{afterCommit: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYEE_NAME}.afterCommit).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYEE_NAME}.afterCommit[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYEE_NAME}.afterCommit[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYEE_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "hub-acc-bal-check",
          "meta": {
            "info": "hub account balance check"
          },
          "description": "hub account balance check",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.HUB_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.HUB_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "hub-reconciliation-acc-bal-bef",
                "description": "hub reconciliation account balance before transfer and  after commit should be the same.",
                "exec": [
                  "expect(environment.balances.Hub.afterCommit).to.deep.equal(environment.balances.Hub.beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const Hub = {",
                "  ...environment.balances.Hub,",
                "  ...{afterCommit: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys(Hub.afterCommit).includes(jsonData[i].currency)) {",
                "    Hub.afterCommit[jsonData[i].currency] = {}",
                "  }",
                "  Hub.afterCommit[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    Hub",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2170
      }
    },
    {
      "id": "settle-settlement",
      "name": "settle-settlement",
      "meta": {
        "info": "settle-settlement"
      },
      "requests": [
        {
          "id": "settle-settle-deferred-settle-",
          "meta": {
            "info": "settle Settlement with deferred settlement model"
          },
          "description": "settle Settlement with deferred settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.deferredSettlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.settlementWindows[0].state;",
                "",
                "console.log(environment.winstate);",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.deferredSettlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers settled for payer\",",
                "                      \"state\": \"SETTLED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after",
          "meta": {
            "info": "check state for participants after settle with deferred settlement model"
          },
          "description": "check state for participants after settle with deferred settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.deferredSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.deferredSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-SETTLED",
                "description": "Check status SETTLED",
                "exec": [
                  "expect(response.body.state).to.eql(\"SETTLED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");"
                ]
              },
              {
                "id": "acc-state-SETTLED-all-accounts",
                "description": "Account state is SETTLED for all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"SETTLED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        },
        {
          "id": "settle-settle-default-settle-m",
          "meta": {
            "info": "settle Settlement default settlement model"
          },
          "description": "settle Settlement default settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.defaultSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.defaultSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.defaultSettlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.settlementWindows[0].state;",
                "",
                "console.log(environment.winstate);",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency2).forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.defaultSettlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers settled for payer\",",
                "                      \"state\": \"SETTLED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts.filter(account => account.netSettlementAmount.currency === pm.environment.get('SIMPAYER_CURRENCY'))",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after-1",
          "meta": {
            "info": "check state for participants after settle default settlement model"
          },
          "description": "check state for participants after settle default settlement model",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.defaultSettlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.defaultSettlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-SETTLED",
                "description": "Check status SETTLED",
                "exec": [
                  "expect(response.body.state).to.eql(\"SETTLED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"SETTLED\");"
                ]
              },
              {
                "id": "acc-state-SETTLED-all-accounts",
                "description": "Account state is SETTLED for all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency2).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"SETTLED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2180
      }
    },
    {
      "id": "store-settlement",
      "name": "Store Settlement&Position Account Balances After Settle",
      "meta": {
        "info": "Store Settlement&Position Account Balances After Settle"
      },
      "requests": [
        {
          "id": "Get-balances-testfsp1",
          "meta": {
            "info": "Get balances for testfsp1"
          },
          "description": "Get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "testfsp1-acc-bal-before-after-",
                "description": "testfsp1 account balance before and  after Settle should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM1_NAME].afterSettle).to.deep.equal(environment.balances[environment.SIM1_NAME].beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM1_NAME} = {",
                "  ...environment.balances[environment.SIM1_NAME],",
                "  ...{afterSettle: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM1_NAME}.afterSettle).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM1_NAME}.afterSettle[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM1_NAME}.afterSettle[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM1_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            },
            "preRequest": {
              "exec": [
                "environment.balances.afterSettle = {}"
              ]
            }
          }
        },
        {
          "id": "Get-balances-testfsp2",
          "meta": {
            "info": "Get balances for testfsp2"
          },
          "description": "Get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "testfsp2-acc-bal-before-after-",
                "description": "testfsp2 account balance before and after Settle should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIM2_NAME].afterSettle).to.deep.equal(environment.balances[environment.SIM2_NAME].beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIM2_NAME} = {",
                "  ...environment.balances[environment.SIM2_NAME],",
                "  ...{afterSettle: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIM2_NAME}.afterSettle).includes(jsonData[i].currency)) {",
                "    {$inputs.SIM2_NAME}.afterSettle[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIM2_NAME}.afterSettle[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIM2_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payerfsp",
          "meta": {
            "info": "Get balances for payerfsp"
          },
          "description": "Get balances for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "payerfsp-acc-bal-before-after-",
                "description": "payerfsp account balance before and after Settle should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYER_NAME].afterSettle).to.deep.equal(environment.balances[environment.SIMPAYER_NAME].beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYER_NAME} = {",
                "  ...environment.balances[environment.SIMPAYER_NAME],",
                "  ...{afterSettle: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYER_NAME}.afterSettle).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYER_NAME}.afterSettle[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYER_NAME}.afterSettle[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYER_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        },
        {
          "id": "Get-balances-payeefsp",
          "meta": {
            "info": "Get balances for payeefsp"
          },
          "description": "Get balances for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "payeefsp-settle-bal-before-aft",
                "description": "payeefsp settlement balance before and after Settle should be the same",
                "exec": [
                  "expect(environment.balances[environment.SIMPAYEE_NAME].afterSettle).to.deep.equal(environment.balances[environment.SIMPAYEE_NAME].beforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "console.log(jsonData);",
                "const {$inputs.SIMPAYEE_NAME} = {",
                "  ...environment.balances[environment.SIMPAYEE_NAME],",
                "  ...{afterSettle: {}}",
                "}",
                "",
                "for (const i in jsonData) {",
                "  if (!Object.keys({$inputs.SIMPAYEE_NAME}.afterSettle).includes(jsonData[i].currency)) {",
                "    {$inputs.SIMPAYEE_NAME}.afterSettle[jsonData[i].currency] = {}",
                "  }",
                "  {$inputs.SIMPAYEE_NAME}.afterSettle[jsonData[i].currency][jsonData[i].ledgerAccountType] = jsonData[i].value",
                "  environment.balances = {",
                "    ...environment.balances,",
                "    {$inputs.SIMPAYEE_NAME}",
                "  }",
                "}",
                "",
                "",
                "console.log(environment.balances)"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/settlement_management/mixed_settlement_model.json",
        "labels": [
          "std-gp",
          "settlements"
        ]
      },
      "options": {
        "executionOrder": 2190
      }
    }
  ]
}