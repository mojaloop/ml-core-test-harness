{
  "name": "multi",
  "test_cases": [
    {
      "id": "reserve-notification",
      "name": "Reserve Notification Positive - Testfsp1 Testfsp2",
      "meta": {
        "info": "Reserve Notification Positive - Testfsp1 Testfsp2"
      },
      "fileInfo": {
        "path": "collections/tests/golden_path/feature_tests/post_scenarios/reserve_notification_positive_testfsp1_testfsp2.json",
        "labels": [
          "std-gp",
          "prod-tests"
        ]
      },
      "requests": [
        {
          "id": "Add-testfsp1MSISDN-testfsp1",
          "meta": {
            "info": "Add {{testfsp1MSISDN}} to testfsp1"
          },
          "description": "Add {{testfsp1MSISDN}} to testfsp1",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator",
            "asynchronous": false,
            "additionalApi": true
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "displayName": "{$requestVariables.fullName}",
            "firstName": "{$requestVariables.firstName}",
            "middleName": "{$requestVariables.middleName}",
            "lastName": "{$requestVariables.lastName}",
            "dateOfBirth": "{$requestVariables.dob}",
            "idType": "MSISDN",
            "idValue": "{$inputs.testfsp1MSISDN}"
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": "Successfully-POST-req",
                "description": "Successfully POST request",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.status).to.be.oneOf([204, 200, 500])",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.fullName = 'Testfsp1First Testfsp1Last'",
                "requestVariables.firstName = 'Testfsp1First'",
                "requestVariables.middleName = 'Testfsp1Middle'",
                "requestVariables.lastName = 'Testfsp1Last'",
                "requestVariables.dob = '2010-10-10'",
                ""
              ]
            }
          },
          "disabled": true
        },
        {
          "id": "Add-testfsp2MSISDN-testfsp2",
          "meta": {
            "info": "Add {{testfsp2MSISDN}} to testfsp2"
          },
          "description": "Add {{testfsp2MSISDN}} to testfsp2",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator",
            "asynchronous": false,
            "additionalApi": true
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "displayName": "{$requestVariables.fullName}",
            "firstName": "{$requestVariables.firstName}",
            "middleName": "{$requestVariables.middleName}",
            "lastName": "{$requestVariables.lastName}",
            "dateOfBirth": "{$requestVariables.dob}",
            "idType": "MSISDN",
            "idValue": "{$inputs.testfsp2MSISDN}"
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": "Successfully-POST-req",
                "description": "Successfully POST request",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.status).to.be.oneOf([204, 200, 500])",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.fullName = 'Testfsp2First Testfsp2Last'",
                "requestVariables.firstName = 'Testfsp2First'",
                "requestVariables.middleName = 'Testfsp2Middle'",
                "requestVariables.lastName = 'Testfsp2Last'",
                "requestVariables.dob = '2010-10-10'",
                ""
              ]
            }
          },
          "disabled": true
        },
        {
          "id": "Add-party-SIMPAYEE-MSISDN",
          "meta": {
            "info": "Add party to SIMPAYEE - MSISDN"
          },
          "description": "Add party to SIMPAYEE - MSISDN",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator",
            "asynchronous": false,
            "additionalApi": true
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "displayName": "PayeeFirst PayeeLast",
            "firstName": "PayeeFirst",
            "middleName": "PayeeMiddle",
            "lastName": "PayeeLast",
            "dateOfBirth": "2010-10-10",
            "idType": "MSISDN",
            "idValue": "{$inputs.testfsp2MSISDN}"
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": "Successfully-POST-req",
                "description": "Successfully POST request",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.status).to.be.oneOf([204, 200, 500])",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            }
          },
          "disabled": true
        },
        {
          "id": "Post-scn-MSISDN-TESTFSP2-TESTF",
          "meta": {
            "info": "Post scenarios - MSISDN - TESTFSP2 to TESTFSP1 - PATCH notification"
          },
          "description": "Post scenarios - MSISDN - TESTFSP2 to TESTFSP1 - PATCH notification",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "ignoreCallbacks": true,
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "PayerFirst PayerLast",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}"
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}"
                },
                "amountType": "SEND",
                "currency": "{$inputs.SIMPAYER_CURRENCY}",
                "amount": "10",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": "Payer-name-matches",
                "description": "Payer name matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.from.displayName).to.equal(requestVariables.payerName)",
                  "}"
                ]
              },
              {
                "id": "Payer-idType-MSISDN",
                "description": "Payer idType is 'MSISDN'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.from.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": "Payer-idValue-matches",
                "description": "Payer idValue matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.from.idValue).to.equal(environment.testfsp2MSISDN)",
                  "}"
                ]
              },
              {
                "id": "Payee-idType-MSISDN",
                "description": "Payee idType is 'MSISDN'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": "Payee-idValue-matches",
                "description": "Payee idValue matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": "Payee-fspId-testfsp1",
                "description": "Payee fspId is \"testfsp1\"",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.fspId).to.equal(environment.SIM1_NAME)",
                  "}"
                ]
              },
              {
                "id": "Payee-First-name-Testfsp1First",
                "description": "Payee First name \"Testfsp1First\"",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario1.result.to.firstName).to.equal('Testfsp1First')",
                  "}"
                ]
              },
              {
                "id": "Payee-Last-name-Testfsp1Last",
                "description": "Payee Last name \"Testfsp1Last\"",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario1.result.to.lastName).to.equal('Testfsp1Last')",
                  "}"
                ]
              },
              {
                "id": "Payee-DOB-matches",
                "description": "Payee DOB matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario1.result.to.dateOfBirth).to.equal('2010-10-10')",
                  "}"
                ]
              },
              {
                "id": "amt-type-SEND",
                "description": "Amount type is 'SEND'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.amountType).to.equal('SEND')",
                  "}"
                ]
              },
              {
                "id": "curr-matches",
                "description": "Currency matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.currency).to.equal('{$inputs.SIMPAYER_CURRENCY}')",
                  "}"
                ]
              },
              {
                "id": "trans-amt-matches",
                "description": "Transfer amount matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.amount).to.equal('10')",
                  "}"
                ]
              },
              {
                "id": "txn-type-trans",
                "description": "Transaction type is 'TRANSFER'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.transactionType).to.equal('TRANSFER')",
                  "}"
                ]
              },
              {
                "id": "Initiator-type-CONSUMER",
                "description": "Initiator type is 'CONSUMER'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.initiatorType).to.equal('CONSUMER')",
                  "}"
                ]
              },
              {
                "id": "Note-matches",
                "description": "Note matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.note).to.equal('test payment')",
                  "}"
                ]
              },
              {
                "id": "transferId-matches",
                "description": "transferId matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.transferId).to.equal(response.body.scenario2.result.transferId)",
                  "}"
                ]
              },
              {
                "id": "Home-txn-ID-matches",
                "description": "Home transaction ID matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.homeTransactionId).to.equal('123ABC')",
                  "}"
                ]
              },
              {
                "id": "Current-state-quote-COMPLETED",
                "description": "Current state on quote is 'COMPLETED'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.currentState).to.equal('COMPLETED')",
                  "}"
                ]
              },
              {
                "id": "trans-amt-matches",
                "description": "Transfer amount matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.transferAmount.amount).to.equal('10')",
                  "}"
                ]
              },
              {
                "id": "curr-matches",
                "description": "Currency matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.transferAmount.currency).to.equal(environment.SIMPAYER_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": "Quote-rsp-expiration-not-null",
                "description": "Quote response expiration is not null",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.expiration).to.not.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": "Quote-req-ILP-packet-not-null",
                "description": "Quote request ILP packet is not null",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.ilpPacket).to.not.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": "Quote-rsp-condition-not-null",
                "description": "Quote response condition is not null",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.condition).to.not.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": "Payee-Fee-amt-0",
                "description": "Payee Fee amount is 0",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.payeeFspFee.amount).to.equal('0')",
                  "}"
                ]
              },
              {
                "id": "Payee-fee-curr-matches",
                "description": "Payee fee currency matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.payeeFspFee.currency).to.equal(environment.SIMPAYEE_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": "Payee-commission-amt-0",
                "description": "Payee FSP commission amount is '0'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.payeeFspCommission.amount).to.equal('0')",
                  "}"
                ]
              },
              {
                "id": "Payee-commission-curr-matches",
                "description": "Payee FSP commission currency matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario1.result.quoteResponse.body.payeeFspCommission.currency).to.equal(environment.SIMPAYEE_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": "Payer-name-matches",
                "description": "Payer FSP name matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.from.displayName).to.equal(requestVariables.payerName)",
                  "}"
                ]
              },
              {
                "id": "Payer-IdType-MSISDN",
                "description": "Payer IdType is 'MSISDN'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.from.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": "Payer-MSISDN-matches",
                "description": "Payer MSISDN matches",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.idValue).to.equal(environment.testfsp1MSISDN)",
                  "}"
                ]
              },
              {
                "id": "Payee-IdType-MSISDN",
                "description": "Payee IdType is 'MSISDN'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": "Receiver-MSISDN-value-matches",
                "description": "Receiver MSISDN value matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.idValue).to.equal(environment.testfsp1MSISDN)",
                  "}"
                ]
              },
              {
                "id": "fspId-testfsp1",
                "description": "fspId is 'testfsp1'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.fspId).to.equal(environment.SIM1_NAME)",
                  "}"
                ]
              },
              {
                "id": "First-name-party-matches",
                "description": "First name of the party matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario2.result.to.firstName).to.equal('Testfsp1First')",
                  "}"
                ]
              },
              {
                "id": "Last-name-party-matches",
                "description": "Last name of the party matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario2.result.to.lastName).to.equal('Testfsp1Last')",
                  "}"
                ]
              },
              {
                "id": "Date-Birth-MSISDN-2010-10-10",
                "description": "Date of Birth of the MSISDN is '2010-10-10'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario2.result.to.dateOfBirth).to.equal('2010-10-10')",
                  "}"
                ]
              },
              {
                "id": "Amount-Type-Quote-req-SEND",
                "description": "Amount-Type in Quote request is 'SEND'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.amountType).to.equal('SEND')",
                  "}"
                ]
              },
              {
                "id": "curr-Quote-req-matches",
                "description": "Currency in Quote request matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.currency).to.equal(environment.SIMPAYER_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": "trans-amt-10",
                "description": "Transfer amount is '10'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.amount).to.equal('10')",
                  "}"
                ]
              },
              {
                "id": "txn-type-trans",
                "description": "Transaction type is 'TRANSFER'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.transactionType).to.equal('TRANSFER')",
                  "}"
                ]
              },
              {
                "id": "Initiator-type-CONSUMER",
                "description": "Initiator type is 'CONSUMER'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.initiatorType).to.equal('CONSUMER')",
                  "}"
                ]
              },
              {
                "id": "Note-matches",
                "description": "Note matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.note).to.equal('test payment')",
                  "}"
                ]
              },
              {
                "id": "HomeTransactionId-123ABC",
                "description": "HomeTransactionId is 123ABC",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.homeTransactionId).to.equal('123ABC')",
                  "}"
                ]
              },
              {
                "id": "Current-state-trans-COMPLETED",
                "description": "Current state of the transfer is 'COMPLETED'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.currentState).to.equal('COMPLETED')",
                  "}"
                ]
              },
              {
                "id": "trans-amt-10",
                "description": "Transfer Amount is '10'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.body.transferAmount.amount).to.equal('10')",
                  "}"
                ]
              },
              {
                "id": "rsp-validation-curr-matches",
                "description": "Response validation: Currency matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.body.transferAmount.currency).to.equal(environment.SIMPAYER_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": "Quote-expiration-not-null",
                "description": "Quote expiration is not null",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.expiration).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": "rsp-ilpPacket-not-null",
                "description": "Response ilpPacket is not null",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.ilpPacket).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": "rsp-condition-not-null",
                "description": "Response condition is not null",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.condition).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": "PayeeFspFee-0",
                "description": "PayeeFspFee is '0'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.body.payeeFspFee.amount).to.equal('0')",
                  "}"
                ]
              },
              {
                "id": "Payee-fee-curr-matches",
                "description": "Payee FSP fee currency matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.body.payeeFspFee.currency).to.equal(environment.SIMPAYEE_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": "Payee-commission-0",
                "description": "Payee FSP commission is '0'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario2.result.quoteResponse.body.payeeFspCommission.amount).to.equal('0')",
                  "}"
                ]
              },
              {
                "id": "Payee-trans-commission-curr-ma",
                "description": "Payee FSP Transfer commission currency matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.API_TYPE === 'fspiop') {",
                  "  expect(response.body.scenario2.result.quoteResponse.body.payeeFspCommission.currency).to.equal(environment.SIMPAYEE_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": "CompletedTimestamp-not-empty",
                "description": "CompletedTimestamp is not empty",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.fulfil.completedTimestamp).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": "transferState-COMMITTED",
                "description": "transferState is 'COMMITTED'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')",
                  "}"
                ]
              },
              {
                "id": "Fulfilment-not-empty",
                "description": "Fulfilment is not empty",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.fulfil.fulfilment).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": "testfsp2-src-testfsp2",
                "description": "On testfsp2 fspiop-source is testfsp2",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-source']).to.equal(environment.SIM2_NAME)",
                  "}"
                ]
              },
              {
                "id": "testfsp2-content-type-correct",
                "description": "On testfsp2 content-type should be correct",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')",
                  "}"
                ]
              },
              {
                "id": "Payee-date-cannot-undefined",
                "description": "On Payee FSP date cannot be undefined",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['date']).to.not.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": "testfsp2-src-testfsp1",
                "description": "On testfsp2 'fspiop-source' is 'testfsp1'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.headers['fspiop-source']).to.equal(environment.SIM1_NAME)",
                  "}"
                ]
              },
              {
                "id": "testfsp2-dest-testfsp2",
                "description": "On testfsp2 'fspiop-destination' is 'testfsp2'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.headers['fspiop-destination']).to.equal(environment.SIM2_NAME)",
                  "}"
                ]
              },
              {
                "id": "testfsp2-content-type-hdr-corr",
                "description": "On testfsp2 'content-type' header should be correct",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')",
                  "}"
                ]
              },
              {
                "id": "Payer-accept-hdr-empty",
                "description": "Payer FSP 'accept' header is empty",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.headers['accept']).to.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": "Payer-JWS-headers-validation",
                "description": "Payer FSP JWS headers validation",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  if (environment.ENABLE_PROTECTED_HEADERS_VALIDATION)",
                  "  expect(requestVariables.payerCallbackJWSHeadersValidationStatus).to.equal('VALID')",
                  "}"
                ]
              },
              {
                "id": "Payer-JWS-validation",
                "description": "Payer FSP JWS validation",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  if (environment.ENABLE_JWS_VALIDATION)",
                  "  expect(requestVariables.payerCallbackJWSValidationStatus).to.equal('VALID')",
                  "}"
                ]
              },
              {
                "id": "Payer-uri-parties-MSISDN-17039",
                "description": "Payer FSP 'fspiop-uri' should be /parties/MSISDN/17039811907",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.headers['fspiop-uri']).to.equal('/parties/MSISDN/{$inputs.testfsp1MSISDN}')",
                  "}"
                ]
              },
              {
                "id": "Payer-method-PUT",
                "description": "Payer FSP 'fspiop-http-method' is PUT",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.headers['fspiop-http-method']).to.equal('PUT')",
                  "}"
                ]
              },
              {
                "id": "Expected-partyIdType-MSISDN",
                "description": "Expected partyIdType is 'MSISDN'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.data.party.partyIdInfo.partyIdType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": "Expected-partyIdentifier-match",
                "description": "Expected partyIdentifier matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.data.party.partyIdInfo.partyIdentifier).to.equal(environment.testfsp1MSISDN)",
                  "}"
                ]
              },
              {
                "id": "Expected-fspId-testfsp1",
                "description": "Expected fspId is 'testfsp1'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerCallback.data.party.partyIdInfo.fspId).to.equal(environment.SIM1_NAME)",
                  "}"
                ]
              },
              {
                "id": "Expected-receiver-first-name-T",
                "description": "Expected receiver first name is 'Testfsp1First'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true && environment.API_TYPE === 'fspiop') {",
                  "  expect(requestVariables.payerCallback.data.party.personalInfo.complexName.firstName).to.equal('Testfsp1First')",
                  "}"
                ]
              },
              {
                "id": "Expected-receiver-last-name-Te",
                "description": "Expected receiver last name is 'Testfsp1Last'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true && environment.API_TYPE === 'fspiop') {",
                  "  expect(requestVariables.payerCallback.data.party.personalInfo.complexName.lastName).to.equal('Testfsp1Last')",
                  "}"
                ]
              },
              {
                "id": "Expected-receiver-DOB-2010-10-",
                "description": "Expected receiver DOB is '2010-10-10'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true && environment.API_TYPE === 'fspiop') {",
                  "  expect(requestVariables.payerCallback.data.party.personalInfo.dateOfBirth).to.equal(requestVariables.expectedPayeeDOB)",
                  "}"
                ]
              },
              {
                "id": "testfsp1-src-switch-s-name",
                "description": "On testfsp1 'fspiop-source' is switch's name",
                "exec": [
                  "/* Disabled temporarily",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeSideTransferRequest.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')",
                  "}",
                  "*/"
                ]
              },
              {
                "id": "testfsp1-dest-testfsp1",
                "description": "On testfsp1 'fspiop-destination' is 'testfsp1'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeSideTransferRequest.headers['fspiop-destination']).to.equal(environment.SIM1_NAME)",
                  "}"
                ]
              },
              {
                "id": "testfsp1-content-type-proper-f",
                "description": "On testfsp1 'content-type' should be in the proper format",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeSideTransferRequest.headers['content-type']).to.have.string('application/vnd.interoperability.transfers+json;version=')",
                  "}"
                ]
              },
              {
                "id": "testfsp1-method-PATCH",
                "description": "On testfsp1 'fspiop-http-method' is PATCH",
                "exec": [
                  "/* Disabled temporarily",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeSideTransferRequest.headers['fspiop-http-method']).to.equal('PATCH')",
                  "}*/"
                ]
              },
              {
                "id": "testfsp1-uri-transfers",
                "description": "On testfsp1 'fspiop-uri' contains '/transfers'",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeSideTransferRequest.headers['fspiop-uri']).to.equal(`/transfers`)",
                  "}"
                ]
              },
              {
                "id": "testfsp2-src-testfsp1",
                "description": "On testfsp2 'fspiop-source' is 'testfsp1'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerSideTransferCallback.headers['fspiop-source']).to.equal(environment.SIM1_NAME)",
                  "}"
                ]
              },
              {
                "id": "testfsp2-dest-testfsp2",
                "description": "On testfsp2 'fspiop-destination' is 'testfsp2'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerSideTransferCallback.headers['fspiop-destination']).to.equal(environment.SIM2_NAME)",
                  "}"
                ]
              },
              {
                "id": "Payer-content-type-correct",
                "description": "On Payer FSP 'content-type' should be correct",
                "exec": [
                  "/* Disabled temporarily",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerSideTransferCallback.headers['content-type']).to.equal('{$inputs.expectedTransfersVersion}')",
                  "}*/"
                ]
              },
              {
                "id": "Payer-accept-empty",
                "description": "On Payer FSP 'accept' is empty",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerSideTransferCallback.headers['accept']).to.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": "Payer-uri-includes-transfers",
                "description": "On Payer FSP 'fspiop-uri' includes '/transfers'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerSideTransferCallback.headers['fspiop-uri']).to.include('/transfers')",
                  "}"
                ]
              },
              {
                "id": "Payer-method-PUT",
                "description": "On Payer FSP 'fspiop-http-method' is PUT",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerSideTransferCallback.headers['fspiop-http-method']).to.equal('PUT')",
                  "}"
                ]
              },
              {
                "id": "rsp-data-does-not-have-transfe",
                "description": "Response data does not have transferId",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerSideTransferCallback.data.transferId).to.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": "rsp-transferState-COMMITTED",
                "description": "Response 'transferState' is 'COMMITTED'",
                "exec": [
                  "",
                  "",
                  "if (environment.TEST_NOTIFICATIONS && environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payerSideTransferCallback.data.transferState).to.equal('COMMITTED')",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.TESTFSP1_SDK_TESTAPI_WS_URL + '/requests/{$inputs.testfsp1MSISDN}', 'payeeRequest')",
                "  ",
                "  // NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API on the postRequest instead until it can be resolved.",
                "  // await websocket.connect(environment.TESTFSP2_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.testfsp1MSISDN}', 'payerCallback')",
                "}",
                "",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\"",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  requestVariables.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "  // NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API on the postRequest instead until it can be resolved.",
                "  // requestVariables.payerCallback = await websocket.getMessage('payerCallback', environment.WS_ASSERTION_TIMEOUT)",
                "  requestVariables.payerCallback = (await axios.get(environment.TESTFSP2_SDK_TESTAPI_URL + '/callbacks/{$inputs.testfsp1MSISDN}')).data",
                "}",
                "",
                "  if (environment.ENABLE_JWS_VALIDATION) {",
                "    // TODO: Use TESTFSP1_JWS_PUB_KEY instead of SIMPAYEE_JWS_PUB_KEY after the MojaSim setup script bug with ",
                "    // conflicting MSISDN for parties is fixed",
                "    requestVariables.payerCallbackJWSValidationStatus = custom.jws.validateCallback(requestVariables.payerCallback.headers, requestVariables.payerCallback.data, environment.SIMPAYEE_JWS_PUB_KEY)",
                "  }",
                "  ",
                "  if (environment.ENABLE_PROTECTED_HEADERS_VALIDATION) {",
                "    requestVariables.payerCallbackJWSHeadersValidationStatus = custom.jws.validateCallbackProtectedHeaders(requestVariables.payerCallback.headers)",
                "  }",
                "",
                "requestVariables.scenario1TransferId = response.body.scenario1.result.transferId",
                "  ",
                "let url, res",
                "",
                "try {",
                "  url = `${environment.TESTFSP1_SDK_TESTAPI_URL}/requests/${response.body.scenario1.result.transferId}`",
                "  res = await axios.get(url)",
                "  requestVariables.payeeSideTransferRequest = res.data",
                "} catch (err) {",
                "  console.log(err)",
                "}",
                "",
                "try {",
                "  url = `${environment.TESTFSP2_SDK_TESTAPI_URL}/callbacks/${response.body.scenario1.result.transferId}`",
                "  res = await axios.get(url)",
                "  requestVariables.payerSideTransferCallback = res.data",
                "} catch (err) {",
                "  console.log(err)",
                "}"
              ]
            }
          },
          "disabled": true
        }
      ]
    }
  ]
}