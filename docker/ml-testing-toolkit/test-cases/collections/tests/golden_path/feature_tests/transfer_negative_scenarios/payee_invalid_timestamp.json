{
  "options": {},
  "name": "multi",
  "test_cases": [
    {
      "id": "payee-invalid-ts",
      "name": "payee_invalid_timestamp",
      "meta": {
        "info": "payee_invalid_timestamp"
      },
      "requests": [
        {
          "id": "Store-SIMPAYER-pos",
          "meta": {
            "info": "Store SIMPAYER position"
          },
          "description": "Store SIMPAYER position",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.fromFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "environment[environment.SIMPAYER_NAME + 'PositionBeforeTransfer'] = response.body[0].value"
              ]
            }
          }
        },
        {
          "id": "Store-NORESPONSE_SIMPAYEE-pos",
          "meta": {
            "info": "Store NORESPONSE_SIMPAYEE position"
          },
          "description": "Store NORESPONSE_SIMPAYEE position",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.NORESPONSE_SIMPAYEE_NAME}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.NORESPONSE_SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "environment[environment.NORESPONSE_SIMPAYEE_NAME + 'PositionBeforeTransfer'] = response.body[0].value"
              ]
            }
          }
        },
        {
          "id": "Send-Quote-RECEIVE",
          "meta": {
            "info": "Send Quote - RECEIVE"
          },
          "description": "Send Quote - RECEIVE",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.NORESPONSE_SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.NORESPONSE_SIMPAYEE_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "1",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "await inboundEvent.addListener('payeePostQuotes', 'post', '/quotes', (headers, body) => {",
                "  return headers['fspiop-destination'] === '{$inputs.NORESPONSE_SIMPAYEE_NAME}'",
                "})"
              ]
            },
            "postRequest": {
              "exec": [
                "requestVariables.payeePostQuotes = await inboundEvent.getMessage('payeePostQuotes')",
                "console.log(requestVariables.payeePostQuotes)"
              ]
            }
          }
        },
        {
          "id": "Send-Quote-rsp",
          "description": "Send Quote - Response",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_1.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_1.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_1.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_1.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_1.1/trigger_templates"
          },
          "operationPath": "/quotes/{ID}",
          "path": "/quotes/{$prev.Send-Quote-RECEIVE.request.body.quoteId}",
          "method": "put",
          "params": {
            "ID": "{$prev.Send-Quote-RECEIVE.request.body.quoteId}"
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "body": {
            "transferAmount": {
              "currency": "{$prev.Send-Quote-RECEIVE.request.body.amount.currency}",
              "amount": "{$prev.Send-Quote-RECEIVE.request.body.amount.amount}"
            },
            "payeeReceiveAmount": {
              "currency": "{$prev.Send-Quote-RECEIVE.request.body.amount.currency}",
              "amount": "{$prev.Send-Quote-RECEIVE.request.body.amount.amount}"
            },
            "payeeFspFee": {
              "currency": "{$prev.Send-Quote-RECEIVE.request.body.amount.currency}",
              "amount": "0"
            },
            "payeeFspCommission": {
              "currency": "{$prev.Send-Quote-RECEIVE.request.body.amount.currency}",
              "amount": "0"
            },
            "expiration": "{$requestVariables.quoteExpiration}",
            "ilpPacket": "{$inputs.ilpPacket}",
            "condition": "{$inputs.validCondition}"
          },
          "headers": {
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.NORESPONSE_SIMPAYEE_NAME}",
            "FSPIOP-Destination": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.quoteExpiration = new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()",
                "await inboundEvent.addListener('payerPutQuotes', 'put', '/quotes/{$prev.Send-Quote-RECEIVE.request.body.quoteId}', (headers, body) => {",
                "  return headers['fspiop-destination'] === '{$inputs.fromFspId}'",
                "})"
              ]
            },
            "postRequest": {
              "exec": [
                "requestVariables.payerPutQuotes = await inboundEvent.getMessage('payerPutQuotes')",
                "console.log(requestVariables.payerPutQuotes)"
              ]
            }
          }
        },
        {
          "id": "Send-Prepare",
          "meta": {
            "info": "Send Prepare"
          },
          "description": "Send Prepare",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.NORESPONSE_SIMPAYEE_NAME}"
          },
          "body": {
            "transferId": "{$prev.Send-Quote-RECEIVE.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.NORESPONSE_SIMPAYEE_NAME}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$requestVariables.transferExpiration}",
            "ilpPacket": "{$prev.Send-Quote-rsp.request.body.ilpPacket}",
            "condition": "{$prev.Send-Quote-rsp.request.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "ignoreCallbacks": true,
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.transferExpiration = new Date(new Date().getTime() + 2000).toISOString()",
                "await inboundEvent.addListener('payeePostTransfer', 'post', '/transfers', (headers, body) => {",
                "  return headers['fspiop-destination'] === '{$inputs.NORESPONSE_SIMPAYEE_NAME}'",
                "})"
              ]
            },
            "postRequest": {
              "exec": [
                "requestVariables.payeePostTransfer = await inboundEvent.getMessage('payeePostTransfer')",
                "console.log(requestVariables.payeePostTransfer)"
              ]
            }
          }
        },
        {
          "id": "Send-Payee-Invalid-Timestamp",
          "meta": {
            "info": "Send Payee Invalid Timestamp"
          },
          "description": "Send Payee Invalid Timestamp",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$prev.Send-Quote-RECEIVE.request.body.transactionId}",
          "method": "put",
          "params": {
            "ID": "{$prev.Send-Quote-RECEIVE.request.body.transactionId}"
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.NORESPONSE_SIMPAYEE_NAME}",
            "Authorization": "{$inputs.NORESPONSE_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.fromFspId}"
          },
          "body": {
            "transferState": "COMMITTED",
            "fulfilment": "{$inputs.invalidFulfillment}",
            "completedTimestamp": "{$requestVariables.completedTimestamp}"
          },
          "ignoreCallbacks": true,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-400",
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.completedTimestamp = new Date(new Date().getTime() + 10000).toISOString()",
                "",
                "await inboundEvent.addListener('payerCallback', 'put', '/transfers/{$prev.Send-Prepare.request.body.transferId}/error', (headers, body) => {",
                "  return headers['fspiop-destination'] === '{$inputs.fromFspId}'",
                "})"
              ]
            },
            "postRequest": {
              "exec": [
                "requestVariables.payeePostTransfer = await inboundEvent.getMessage('payerCallback', 15000)"
              ]
            }
          }
        },
        {
          "id": "Check-trans-status-SIMPAYER-AB",
          "meta": {
            "info": "Check Transfer status on SIMPAYER - ABORTED"
          },
          "description": "Check Transfer status on SIMPAYER - ABORTED",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$prev.Send-Quote-RECEIVE.request.body.transactionId}",
          "method": "get",
          "params": {
            "ID": "{$prev.Send-Quote-RECEIVE.request.body.transactionId}"
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.NORESPONSE_SIMPAYEE_NAME}",
            "Content-Type": "{$inputs.contentTypeTransfers}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-hdr-src-switch-s-name",
                "description": "Callback Header - fspiop-source is switch's name",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')",
                  ""
                ]
              },
              {
                "id": "cb-hdr-fspiop-desination-src-r",
                "description": "Callback Header - fspiop-desination is fspiop-source in request",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$inputs.fromFspId}')",
                  ""
                ]
              },
              {
                "id": "cb-hdr-content-type",
                "description": "Callback Header - content-type",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')",
                  ""
                ]
              },
              {
                "id": "cb-hdr-accept-empty",
                "description": "Callback Header - accept is empty",
                "exec": [
                  "expect(callback.headers['accept']).to.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-Date-not-empty",
                "description": "Callback Header - Date is not empty",
                "exec": [
                  "expect(callback.headers['date']).to.not.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-uri-transfers-transferI",
                "description": "Callback Header - fspiop-uri is /transfers/transferId",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal('/transfers/' + request.params.ID)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-method-PUT",
                "description": "Callback Header - fspiop-http-method is PUT",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal('PUT')",
                  ""
                ]
              },
              {
                "id": "cb-transferState-ABORTED",
                "description": "Callback Body - transferState is ABORTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('ABORTED')",
                  ""
                ]
              },
              {
                "id": "cb-error-cause-extensionList",
                "description": "Callback Body - error cause in extensionList",
                "exec": [
                  "if (environment.API_TYPE === 'fspiop') {",
                  "expect(callback.body).to.have.property('extensionList')",
                  "expect(callback.body.extensionList).to.have.property('extension')",
                  "",
                  "const filteredExtensionListForCause = callback.body.extensionList.extension.filter(ext => ext.key === \"cause\")",
                  "",
                  "expect(filteredExtensionListForCause.length).to.equal(1)",
                  "",
                  "expect(filteredExtensionListForCause[0].value).to.equal(\"3303: Transfer expired\")",
                  "}"
                ]
              }
            ]
          }
        },
        {
          "id": "Check-Payeefsp-pos",
          "meta": {
            "info": "Check Payeefsp position"
          },
          "description": "Check Payeefsp position",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.NORESPONSE_SIMPAYEE_NAME}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.NORESPONSE_SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Payeefsp-pos-after-Payee-Inval",
                "description": "Payeefsp position after Payee Invalid Fulfillment should be same as position before transfer.",
                "exec": [
                  "expect(response.body[0].value).to.equal(+environment[environment.NORESPONSE_SIMPAYEE_NAME + 'PositionBeforeTransfer'])"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Check-Payerfsp-pos",
          "meta": {
            "info": "Check Payerfsp position"
          },
          "description": "Check Payerfsp position",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.fromFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Payeefsp-pos-after-Payee-Inval",
                "description": "Payeefsp position after Payee Invalid Fulfillment should be same as position before transfer.",
                "exec": [
                  "expect(response.body[0].value).to.equal(+environment.payerfspPositionBeforeTransfer)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/golden_path/feature_tests/transfer_negative_scenarios/payee_invalid_timestamp.json",
        "labels": [
          "prod-tests"
        ]
      }
    }
  ]
}