{
  "name": "multi",
  "test_cases": [
    {
      "id": "p2p-receive-quote",
      "name": "p2p_money_transfer - p2p_happy_path RECEIVE_QUOTE",
      "meta": {
        "info": "p2p_money_transfer - p2p_happy_path RECEIVE_QUOTE"
      },
      "requests": [
        {
          "id": "Add-part-ALS",
          "meta": {
            "info": "Add Participant to ALS"
          },
          "description": "Add Participant to ALS",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.SIMPAYEE_MSISDN}",
          "method": "post",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.SIMPAYEE_MSISDN}"
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.toFspId}",
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "baggage": "errorExpect=ALS.1001",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}"
          },
          "body": {
            "fspId": "{$inputs.SIMPAYEE_NAME}",
            "currency": "{$inputs.currency}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "ignoreCallbacks": true
        },
        {
          "id": "Add-Party-Simulator",
          "meta": {
            "info": "Add Party to Simulator"
          },
          "description": "Add Party to Simulator",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator",
            "asynchronous": false,
            "additionalApi": true
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.PAYEEFSP_BACKEND_TESTAPI_URL}",
          "headers": {
            "FSPIOP-Source": "{$inputs.SIMPAYEE_NAME}",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}",
            "Content-Type": "application/json"
          },
          "body": {
            "displayName": "Test PayeeFSP",
            "firstName": "Test",
            "middleName": "Test",
            "lastName": "Test",
            "dateOfBirth": "1984-01-01",
            "idType": "MSISDN",
            "idValue": "{$inputs.SIMPAYEE_MSISDN}"
          }
        },
        {
          "id": "Send-quote",
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.SIMPAYEE_NAME}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.SIMPAYEE_MSISDN}",
                "fspId": "{$inputs.SIMPAYEE_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.SIMPAYEE_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "",
                "if(environment.ENABLE_JWS_SIGNING) {",
                "  custom.jws.signRequest(environment.TTKFSP_JWS_KEY)",
                "}",
                "",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if(environment.ENABLE_JWS_VALIDATION) {",
                "  requestVariables.jwsValidationStatus =  custom.jws.validateCallback(callback.headers, callback.body, environment.SIMPAYEE_JWS_PUB_KEY)",
                "}",
                "else if(environment.ENABLE_PROTECTED_HEADERS_VALIDATION) {",
                "  requestVariables.protectedHeadersValidationStatus =  custom.jws.validateCallbackProtectedHeaders(callback.headers)",
                "}",
                "",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  requestVariables.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Validate-Protected-Headers",
                "description": "Callback Validate Protected Headers",
                "exec": [
                  "if(environment.ENABLE_PROTECTED_HEADERS_VALIDATION) {",
                  "  expect(requestVariables.protectedHeadersValidationStatus).to.equal('VALID')",
                  "}"
                ]
              },
              {
                "id": "cb-Validate-JWS",
                "description": "Callback Validate JWS",
                "exec": [
                  "if (environment.ENABLE_JWS_VALIDATION) {",
                  "  expect(requestVariables.jwsValidationStatus).to.equal('VALID')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-src",
                "description": "Payee Side Request Header - fspiop-source is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-source']).to.equal(request.headers['fspiop-source'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-dest",
                "description": "Payee Side Request Header - fspiop-destination is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-destination']).to.equal(request.headers['fspiop-destination'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-fspiop-signature",
                "description": "Payee Side Request Header - fspiop-signature is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-signature']).to.equal(requestSent.headers['fspiop-signature'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-accept",
                "description": "Payee Side Request Header - accept is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['accept']).to.equal(request.headers['accept'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-content-type",
                "description": "Payee Side Request Header - content-type is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['content-type']).to.equal(request.headers['content-type'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-uri",
                "description": "Payee Side Request Header - fspiop-uri is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-uri']).to.equal(requestSent.headers['fspiop-uri'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-method",
                "description": "Payee Side Request Header - fspiop-http-method is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-http-method']).to.equal(requestSent.headers['fspiop-http-method'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-QuoteId",
                "description": "Payee Side Request Body - QuoteId",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data['quoteId']).to.equal('{$request.body.quoteId}')",
                  "}"
                ]
              },
              {
                "id": "Payee-TransactionId",
                "description": "Payee Side Body - TransactionId",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data['transactionId']).to.equal('{$request.body.transactionId}')",
                  "}"
                ]
              },
              {
                "id": "cb-hdr-src-dest-req",
                "description": "Callback Header - fspiop-source is fspiop-destination in request",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal(request.headers['fspiop-destination'])",
                  ""
                ]
              },
              {
                "id": "cb-hdr-fspiop-desination-src-r",
                "description": "Callback Header - fspiop-desination is fspiop-source in request",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal(request.headers['fspiop-source'])",
                  ""
                ]
              },
              {
                "id": "cb-hdr-content-type-correct",
                "description": "Callback Header - content-type is correct",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')",
                  ""
                ]
              },
              {
                "id": "cb-hdr-accept-empty",
                "description": "Callback Header - accept is empty",
                "exec": [
                  "expect(callback.headers['accept']).to.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-uri-quotes-quoteId",
                "description": "Callback Header - fspiop-uri is /quotes/quoteId",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal('/quotes/' + request.body.quoteId)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-method-PUT",
                "description": "Callback Header - fspiop-http-method is PUT",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal('PUT')",
                  ""
                ]
              },
              {
                "id": "cb-quoteId-null",
                "description": "Callback Body - quoteId is null",
                "exec": [
                  "expect(callback.body.quoteId).to.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-ilpPacket-not-null",
                "description": "Callback Body - ilpPacket is not null",
                "exec": [
                  "expect(callback.body.ilpPacket).to.not.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-condition-not-nul",
                "description": "Callback Body - condition is not nul",
                "exec": [
                  "expect(callback.body.condition).to.not.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}"
        },
        {
          "id": "Send-trans",
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.Send-quote.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.SIMPAYEE_NAME}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.Send-quote.callback.body.expiration}",
            "ilpPacket": "{$prev.Send-quote.callback.body.ilpPacket}",
            "condition": "{$prev.Send-quote.callback.body.condition}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "",
                "if(environment.ENABLE_JWS_SIGNING) {",
                "  custom.jws.signRequest(environment.TTKFSP_JWS_KEY)",
                "}",
                "",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.transferId}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if(environment.ENABLE_JWS_VALIDATION) {",
                "  requestVariables.jwsValidationStatus =  custom.jws.validateCallback(callback.headers, callback.body, environment.SIMPAYEE_JWS_PUB_KEY)",
                "}",
                "else if(environment.ENABLE_PROTECTED_HEADERS_VALIDATION) {",
                "  requestVariables.protectedHeadersValidationStatus =  custom.jws.validateCallbackProtectedHeaders(callback.headers)",
                "}",
                "",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  requestVariables.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Validate-Protected-Headers",
                "description": "Callback Validate Protected Headers",
                "exec": [
                  "if(environment.ENABLE_PROTECTED_HEADERS_VALIDATION) {",
                  "  expect(requestVariables.protectedHeadersValidationStatus).to.equal('VALID')",
                  "}"
                ]
              },
              {
                "id": "cb-Validate-JWS",
                "description": "Callback Validate JWS",
                "exec": [
                  "if (environment.ENABLE_JWS_VALIDATION) {",
                  "  expect(requestVariables.jwsValidationStatus).to.equal('VALID')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-src",
                "description": "Payee Side Request Header - fspiop-source is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-source']).to.equal(request.headers['fspiop-source'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-fspiop-signature",
                "description": "Payee Side Request Header - fspiop-signature is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-signature']).to.equal(requestSent.headers['fspiop-signature'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-accept",
                "description": "Payee Side Request Header - accept is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['accept']).to.equal(request.headers['accept'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-content-type",
                "description": "Payee Side Request Header - content-type is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['content-type']).to.equal(request.headers['content-type'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-uri",
                "description": "Payee Side Request Header - fspiop-uri is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-uri']).to.equal(requestSent.headers['fspiop-uri'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-hdr-method",
                "description": "Payee Side Request Header - fspiop-http-method is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(requestVariables.payeeRequest.headers['fspiop-http-method']).to.equal(requestSent.headers['fspiop-http-method'])",
                  "}"
                ]
              },
              {
                "id": "Payee-req-TransferId",
                "description": "Payee Side Request Body - TransferId",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data['transferId']).to.equal('{$request.body.transferId}')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-payerFsp",
                "description": "Payee Side Request Body - payerFsp is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data['payerFsp']).to.equal('{$request.body.payerFsp}')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-payeeFsp",
                "description": "Payee Side Request Body - payeeFsp is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data['payeeFsp']).to.equal('{$request.body.payeeFsp}')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-amt",
                "description": "Payee Side Request Body - amount is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data.amount['amount']).to.equal('{$request.body.amount.amount}')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-curr",
                "description": "Payee Side Request Body - currency is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data.amount['currency']).to.equal('{$request.body.amount.currency}')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-expiration",
                "description": "Payee Side Request Body - expiration is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data['expiration']).to.equal('{$request.body.expiration}')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-ilpPacket",
                "description": "Payee Side Request Body - ilpPacket is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data['ilpPacket']).to.equal('{$request.body.ilpPacket}')",
                  "}"
                ]
              },
              {
                "id": "Payee-req-condition",
                "description": "Payee Side Request Body - condition is same",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.data['condition']).to.equal('{$request.body.condition}')",
                  "}"
                ]
              },
              {
                "id": "cb-hdr-src-dest-req",
                "description": "Callback Header - fspiop-source is fspiop-destination in request",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal('{$inputs.SIMPAYEE_NAME}')",
                  ""
                ]
              },
              {
                "id": "cb-hdr-fspiop-desination-src-r",
                "description": "Callback Header - fspiop-desination is fspiop-source in request",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal(request.headers['fspiop-source'])",
                  ""
                ]
              },
              {
                "id": "cb-hdr-content-type-correct",
                "description": "Callback Header - content-type is correct",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')",
                  ""
                ]
              },
              {
                "id": "cb-hdr-accept-empty",
                "description": "Callback Header - accept is empty",
                "exec": [
                  "expect(callback.headers['accept']).to.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-uri-quotes-quoteId",
                "description": "Callback Header - fspiop-uri is /quotes/quoteId",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal('/transfers/' + request.body.transferId)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-method-PUT",
                "description": "Callback Header - fspiop-http-method is PUT",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal('PUT')",
                  ""
                ]
              },
              {
                "id": "cb-transferId-null",
                "description": "Callback Body - transferId is null",
                "exec": [
                  "expect(callback.body.transferId).to.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback Body - transferState is COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')",
                  ""
                ]
              },
              {
                "id": "cb-fulfilment-not-nul",
                "description": "Callback Body - fulfilment is not nul",
                "exec": [
                  "expect(callback.body.fulfilment).to.not.equal(undefined)",
                  ""
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}"
        },
        {
          "id": "Duplicate-trans",
          "meta": {
            "info": "Duplicate transfer"
          },
          "description": "Duplicate transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.Send-quote.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.SIMPAYEE_NAME}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.Send-quote.callback.body.expiration}",
            "ilpPacket": "{$prev.Send-quote.callback.body.ilpPacket}",
            "condition": "{$prev.Send-quote.callback.body.condition}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "",
                "if(environment.ENABLE_JWS_SIGNING) {",
                "  custom.jws.signRequest(environment.TTKFSP_JWS_KEY)",
                "}",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-hdr-src-switch-s-name",
                "description": "Callback Header - fspiop-source is switch's name",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')",
                  ""
                ]
              },
              {
                "id": "cb-hdr-fspiop-desination-src-r",
                "description": "Callback Header - fspiop-desination is fspiop-source in request",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal(request.headers['fspiop-source'])",
                  ""
                ]
              },
              {
                "id": "cb-hdr-content-type-correct",
                "description": "Callback Header - content-type is correct",
                "exec": [
                  "expect(callback.headers['content-type']).to.have.string('{$inputs.expectedTransfersVersion}')",
                  ""
                ]
              },
              {
                "id": "cb-hdr-accept-empty",
                "description": "Callback Header - accept is empty",
                "exec": [
                  "expect(callback.headers['accept']).to.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-fspiop-signature-not-nu",
                "description": "Callback Header - fspiop-signature is not null",
                "exec": [
                  "expect(callback.headers['fspiop-signature']).to.not.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-uri-quotes-quoteId",
                "description": "Callback Header - fspiop-uri is /quotes/quoteId",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal('/transfers/' + request.body.transferId)",
                  ""
                ]
              },
              {
                "id": "cb-hdr-method-PUT",
                "description": "Callback Header - fspiop-http-method is PUT",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal('PUT')",
                  ""
                ]
              },
              {
                "id": "cb-transferId-null",
                "description": "Callback Body - transferId is null",
                "exec": [
                  "expect(callback.body.transferId).to.equal(undefined)",
                  ""
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback Body - transferState is COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')",
                  ""
                ]
              },
              {
                "id": "cb-fulfilment-last-cb",
                "description": "Callback Body - fulfilment is same as in the last callback",
                "exec": [
                  "expect(callback.body.fulfilment).to.equal('{$prev.Send-trans.callback.body.fulfilment}')",
                  ""
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}"
        }
      ],
      "fileInfo": {
        "path": "hub/golden_path/feature_tests/duplicate_handling/transfers/original_transfer_at_committed.json",
        "labels": [
          "prod-tests"
        ]
      }
    }
  ]
}