{
  "name": "multi",
  "test_cases": [
    {
      "id": "bugfix-998",
      "name": "Tests for Bugfix #998 - Quoting service not using most recent endpoint",
      "meta": {
        "info": "Tests for Bugfix #998 - Quoting service not using most recent endpoint"
      },
      "requests": [
        {
          "id": "Add-payeefsp-req-URL-QUOTES-PU",
          "meta": {
            "info": "Add payeefsp request URL - QUOTES PUT with incorrect endpoint"
          },
          "description": "Add payeefsp request URL - QUOTES PUT with incorrect endpoint",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/endpoints",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/endpoints",
          "method": "post",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "ignoreCallbacks": true,
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "type": "FSPIOP_CALLBACK_URL_QUOTES",
            "value": "{$inputs.PAYEEFSP_CALLBACK_URL}/incorrectpayeefsp"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-201",
                "description": "Response status to be 201",
                "exec": [
                  "expect(response.status).to.equal(201)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.toIdValue}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        },
        {
          "id": "Send-quote",
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "Authorization": "{$inputs.PAYER_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.SIMPAYER_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.payeefsp}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "delay": "{$inputs.DELAY_QUOTES}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Test-Passed-Because-didn-t-get",
                "description": "Test Passed - Because didn't get request at payeefsp request URL",
                "exec": [
                  "expect(environment.payercallbackx.data.errorInformation.errorCode).to.equal('3000');"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'payercallback')",
                "}",
                "console.log(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}');"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payercallbackx = await websocket.getMessage('payercallback', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "console.log(environment.payercallbackx);"
              ]
            }
          }
        },
        {
          "id": "Add-payeefsp-req-URL-QUOTES-PU-1",
          "meta": {
            "info": "Add payeefsp request URL - QUOTES PUT with correct endpoint"
          },
          "description": "Add payeefsp request URL - QUOTES PUT with correct endpoint",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/endpoints",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/endpoints",
          "method": "post",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "ignoreCallbacks": true,
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "type": "FSPIOP_CALLBACK_URL_QUOTES",
            "value": "{$inputs.PAYEEFSP_CALLBACK_URL}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-201",
                "description": "Response status to be 201",
                "exec": [
                  "expect(response.status).to.equal(201)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.toIdValue}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        },
        {
          "id": "Send-quote-Copy",
          "meta": {
            "info": "Send quote Copy"
          },
          "description": "Send quote Copy",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "Authorization": "{$inputs.PAYER_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.SIMPAYER_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.payeefsp}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "delay": "{$inputs.DELAY_QUOTES}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Ilppacket-exist",
                "description": "Ilppacket exist",
                "exec": [
                  "expect(environment.payercallbackx.data.ilpPacket).not.to.equal(undefined);"
                ]
              },
              {
                "id": "condition-exist",
                "description": "condition exist",
                "exec": [
                  "expect(environment.payercallbackx.data.condition).not.to.equal(undefined);"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'payercallback')",
                "}",
                "console.log(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}');"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payercallbackx = await websocket.getMessage('payercallback', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "console.log(environment.payercallbackx);"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "collections/tests/golden_path/bug fixes/Tests for Bugfix #998 - Quoting service not using most recent endpoint.json",
        "labels": [
          "std-gp",
          "prod-tests",
          "quotes"
        ]
      }
    }
  ]
}