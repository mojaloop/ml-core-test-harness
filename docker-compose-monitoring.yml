version: "3.7"

networks:
  monitoring-net:
    name: monitoring-net
  mojaloop-net:
    name: mojaloop-net
    external: true

volumes:
    vol_prometheus_data: {}
    vol_grafana_data: {}

services:

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    volumes:
      - ./docker/prometheus/:/etc/prometheus/
      - vol_prometheus_data:/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--enable-feature=native-histograms' # Ref: https://prometheus.io/docs/concepts/metric_types/#histogram, https://k6.io/docs/results-output/real-time/prometheus-remote-write/#send-test-metrics-to-a-remote-write-endpoint
      - '--web.enable-remote-write-receiver' # Ref: https://prometheus.io/docs/prometheus/latest/feature_flags/#remote-write-receiver
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      #- alertmanager:alertmanager
      #- pushgateway:pushgateway
    depends_on:
      - cadvisor
      #- pushgateway
    networks:
      - mojaloop-net
      - monitoring-net
    restart: always
    # deploy:
    #   placement:
    #     constraints:
    #       - node.hostname == ${HOSTNAME}

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - mojaloop-net
      - monitoring-net
    restart: always
    deploy:
      mode: global

  # alertmanager:
  #   image: prom/alertmanager
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ./docker/alertmanager/:/etc/alertmanager/
  #   networks:
  #     - mojaloop-net
  #     - monitoring-net
  #   restart: always
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'
  #   # deploy:
  #   #   placement:
  #   #     constraints:
  #   #       - node.hostname == ${HOSTNAME}

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISER_VERSION}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - mojaloop-net
      - monitoring-net
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 9999:3000
    volumes:
      - vol_grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./docker/grafana/config.env
    environment:
      GF_SECURITY_DATA_SOURCE_PROXY_WHITELIST: mysql-cl:3306
      GRAFANA_CL_MYSQL_PASSWORD: password
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    networks:
      - mojaloop-net
      - monitoring-net
    restart: always

  ## Ref: https://github.com/grafana/grafana-image-renderer
  renderer:
    image: grafana/grafana-image-renderer:${GRAFANA_RENDERER_VERSION}
    ports:
      - 8081:8081
    environment:
      # ENABLE_METRICS: 'true'
      # VIRTUAL_HOST: renderer.loc
      HTTP_HOST: 0.0.0.0
      # RENDERING_MODE: ${RENDERING_MODE}
      # RENDERING_CLUSTERING_MODE: ${RENDERING_CLUSTERING_MODE}
      # RENDERING_CLUSTERING_MAX_CONCURRENCY: ${RENDERING_CLUSTERING_MAX_CONCURRENCY}
      # RENDERING_ARGS: --no-sandbox,--disable-setuid-sandbox,--disable-dev-shm-usage,--disable-accelerated-2d-canvas,--disable-gpu,--window-size=8000x8000
    networks:
      - monitoring-net
    volumes:
      - ./docker/renderer/config.json:/usr/src/app/config.json

  mysqlexporter-als:
    image: prom/mysqld-exporter:v0.15.0
    # ports:
    # - "9104:9104"
    networks:
      - mojaloop-net
      - monitoring-net
    environment:
    - MYSQLD_EXPORTER_PASSWORD=password
    command:
      - --mysqld.address=mysql-als:3306
      - --mysqld.username=exporter
    profiles:
      - als-test

  mysqlexporter-cl:
    image: prom/mysqld-exporter:v0.15.0
    # ports:
    # - "9104:9104"
    networks:
      - mojaloop-net
      - monitoring-net
    environment:
    - MYSQLD_EXPORTER_PASSWORD=password
    command:
      - --mysqld.address=mysql-cl:3306
      - --mysqld.username=exporter
    profiles:
      - transfers-test

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    ports:
      - "9308:9308"
    networks:
      - mojaloop-net
      - monitoring-net
    command:
      - --kafka.server=kafka:9092

  ## Debug utilities
  kafka-debug-console:
    # image: quay.io/cloudhut/kowl:v1.4.0
    image: docker.redpanda.com/redpandadata/console:latest
    deploy:
      replicas: 1
    restart: on-failure
    hostname: kafka-debug-console
    ports:
    - "9080:8080"
    networks:
      - mojaloop-net
    environment:
      - KAFKA_BROKERS=kafka:29092
